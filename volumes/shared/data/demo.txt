# -*- coding: utf-8 -*-
# For copyright and license terms, see COPYRIGHT.rst (top level of repository)
# Repository: https://github.com/C3S/collecting_society_docker
# flake8: noqa

=========
Test Data
=========

Preparation
===========

Imports
-------
::
    >>> import os
    >>> import csv
    >>> import datetime
    >>> import random
    >>> import string
    >>> import decimal
    >>> import uuid
    >>> from proteus import config, Model, Wizard
    >>> # import interlude; interlude.interact(locals())

Configuration
-------------
::

    >>> debug = int(os.environ.get('TRYTON_DEMODATA_DEBUG', 0))

    >>> publisher = debug or 10
    >>> label = debug or 10
    >>> tariff_systems = debug or 3
    >>> distribution_plans = debug or 3

    >>> group_artists = debug or 3
    >>> new_solo_artists_per_group = debug or 2
    >>> add_solo_artists_per_group = debug or 1
    >>> foreign_artists_per_group = debug or 1
    >>> releases_per_artist = debug or 1
    >>> creations_per_release = debug or 3
    >>> genres_per_release = debug or 2
    >>> styles_per_release = debug or 2
    >>> release_cancellation_chance = debug and 1 or 0.3
    >>> originals_per_creation = debug or 2
    >>> foreign_originals_per_creation = debug and 1 or 1
    >>> max_composers_per_creation = debug or 3
    >>> max_recorders_per_creation = debug or 3
    >>> max_texters_per_creation = debug or 2
    >>> max_producers_per_creation = debug or 2
    >>> max_masters_per_creation = debug or 2
    >>> max_mixers_per_creation = debug or 2
    >>> foreign_contribution_chance_per_creation = debug and 1 or 0.3
    >>> audio_content_chance_per_creation = debug and 1 or 0.8
    >>> lyric_content_chance_per_creation = debug and 1 or 0.6
    >>> sheet_content_chance_per_creation = debug and 1 or 0.1

    >>> sampler_releases = debug or 1
    >>> creations_per_sampler = debug or 5
    >>> split_releases = debug or 1
    >>> artists_per_split_release = debug or 2
    >>> creations_per_split_artist = debug or 2

    >>> playlists_per_artist = debug or 3
    >>> artist_creations_per_playlist = debug or 8
    >>> foreign_creations_per_playlist = debug or 2

    >>> webuser_all_roles = debug or 2
    >>> webuser_licensee = debug or 3

    >>> licensee_playing_bars = debug or 1
    >>> fingerprint_messages_per_device = debug or 10
    >>> usagereport_messages_per_device = debug or 10
    >>> licensee_live_events = debug or 3
    >>> performances_per_event = debug or 3
    >>> items_per_performance_playlist = debug or 5
    >>> licensee_reproduction_releases = debug or 3
    >>> creations_per_reproduction_release = debug or 10
    >>> licensee_online_webradios = debug or 1
    >>> channels_per_webradio = debug or 3
    >>> licensee_online_podcasts = debug or 1
    >>> episodes_per_podcast = debug or 3
    >>> originals_per_episode = debug or 5
    >>> licensee_online_dsps = debug or 1

    >>> storehouses = debug or 2
    >>> harddisklabels_per_storehouse = debug or 2
    >>> harddisks_per_harddisklabel = debug or 2
    >>> filesystemlabels_per_harddisk = debug or 2
    >>> filesystems_per_filesystemlabel = debug or 2

    >>> delimiter = ','
    >>> quotechar = '"'

    >>> config = config.set_trytond(
    ...     config_file=os.environ.get('TRYTOND_CONFIG'))

Models
------

Upstream::

    >>> Company = Model.get('company.company')
    >>> User = Model.get('res.user')
    >>> Country = Model.get('country.country')

Extended::

    >>> Party = Model.get('party.party')
    >>> WebUser = Model.get('web.user')
    >>> WebUserRole = Model.get('web.user.role')

New::

    >>> PartyIdentifier = Model.get('party.identifier')
    >>> PartyIdentifierSpace = Model.get('party.identifier.space')

    >>> CollectingSociety = Model.get('collecting_society')

    >>> TariffSystem = Model.get('tariff_system')
    >>> TariffCategory = Model.get('tariff_system.category')
    >>> TariffAdjustmentCategory = Model.get('tariff_system.tariff.adjustment.category')
    >>> TariffAdjustment = Model.get('tariff_system.tariff.adjustment')
    >>> TariffRelevanceCategory = Model.get('tariff_system.tariff.relevance.category')
    >>> TariffRelevance = Model.get('tariff_system.tariff.relevance')
    >>> Tariff = Model.get('tariff_system.tariff')

    >>> Allocation = Model.get('distribution.allocation')
    >>> Distribution = Model.get('distribution')
    >>> DistributionPlan = Model.get('distribution.plan')

    >>> EventIndicators = Model.get('event.indicators')
    >>> LocationIndicators = Model.get('location.indicators')
    >>> LocationIndicatorsPeriod = Model.get('location.indicators.period')
    >>> LocationSpaceIndicators = Model.get('location.space.indicators')
    >>> WebsiteResourceIndicators = Model.get('website.resource.indicators')
    >>> ReleaseIndicators = Model.get('release.indicators')
    >>> UtilisationIndicators = Model.get('utilisation.indicators')

    >>> License = Model.get('license')

    >>> Artist = Model.get('artist')
    >>> ArtistArtist = Model.get('artist-artist')
    >>> ArtistRelease = Model.get('artist-release')
    >>> ArtistPayeeAcceptance = Model.get('artist.payee.acceptance')
    >>> ArtistIdentifier = Model.get('artist.identifier')
    >>> ArtistIdentifierSpace = Model.get('artist.identifier.space')
    >>> ArtistPlaylist = Model.get('artist.playlist')
    >>> ArtistPlaylistItem = Model.get('artist.playlist.item')

    >>> Creation = Model.get('creation')
    >>> CreationDerivative = Model.get('creation.original.derivative')
    >>> CreationContribution = Model.get('creation.contribution')
    >>> CreationContributionRole = Model.get('creation.contribution-creation.role')
    >>> CreationRole = Model.get('creation.role')
    >>> CreationTariffCategory = Model.get('creation-tariff_category')
    >>> CreationIdentifier = Model.get('creation.identifier')
    >>> CreationIdentifierSpace = Model.get('creation.identifier.space')
    >>> CreationRightsholder = Model.get('creation.rightsholder')
    >>> CreationRightsholderCreationRightsholder = Model.get('creation.rightsholder-creation.rightsholder')

    >>> Release = Model.get('release')
    >>> ReleaseTrack = Model.get('release.track')
    >>> ReleaseGenre = Model.get('release-genre')
    >>> ReleaseStyle = Model.get('release-style')
    >>> ReleaseIdentifier = Model.get('release.identifier')
    >>> ReleaseIdentifierSpace = Model.get('release.identifier.space')
    >>> ReleaseRightsholder = Model.get('release.rightsholder')
    >>> ReleaseRightsholderReleaseRightsholder = Model.get('release.rightsholder-release.rightsholder')

    >>> Genre = Model.get('genre')
    >>> Style = Model.get('style')
    >>> Label = Model.get('label')
    >>> Publisher = Model.get('publisher')

    >>> Event = Model.get('event')
    >>> EventPerformance = Model.get('event.performance')

    >>> Location = Model.get('location')
    >>> LocationCategory = Model.get('location.category')
    >>> LocationSpace = Model.get('location.space')
    >>> LocationSpaceCategory = Model.get('location.space.category')

    >>> Website = Model.get('website')
    >>> WebsiteCategory = Model.get('website.category')
    >>> WebsiteResource = Model.get('website.resource')
    >>> WebsiteResourceCreation = Model.get('website.resource-creation')
    >>> WebsiteResourceCategory = Model.get('website.resource.category')
    >>> WebsiteCategoryWebsiteResourceCategory = Model.get('website.category-website.resource.category')

    >>> Device = Model.get('device')
    >>> DeviceAssignment = Model.get('device.assignment')
    >>> DeviceMessage = Model.get('device.message')
    >>> DeviceMessageDeviceMessage = Model.get('device.message-device.message')
    >>> DeviceMessageFingerprint = Model.get('device.message.fingerprint')
    >>> DeviceMessageFingerprintCreationlist = Model.get('device.message.fingerprint.creationlist')
    >>> DeviceMessageFingerprintCreationlistItem = Model.get('device.message.fingerprint.creationlist.item')
    >>> DeviceMessageUsagereport = Model.get('device.message.usagereport')

    >>> Declaration = Model.get('declaration')
    >>> DeclarationGroup = Model.get('declaration.group')
    >>> DeclarationCollection = Model.get('declaration.collection')

    >>> Utilisation = Model.get('utilisation')
    >>> UtilisationCreationlist = Model.get('utilisation.creationlist')
    >>> UtilisationCreationlistItem = Model.get('utilisation.creationlist.item')

    >>> Storehouse = Model.get('storehouse')
    >>> Harddisk = Model.get('harddisk')
    >>> HarddiskLabel = Model.get('harddisk.label')
    >>> HarddiskTest = Model.get('harddisk.test')
    >>> Filesystem = Model.get('harddisk.filesystem')
    >>> FilesystemLabel = Model.get('harddisk.filesystem.label')
    >>> Content = Model.get('content')
    >>> Fingerprintlog = Model.get('content.fingerprintlog')
    >>> Checksum = Model.get('checksum')

    >>> AccessControlEntry = Model.get('ace')
    >>> AccessControlEntryRole = Model.get('ace-ace.role')
    >>> AccessRole = Model.get('ace.role')
    >>> AccessRolePermission = Model.get('ace.role-ace.permission')
    >>> AccessPermission = Model.get('ace.permission')

Content
-------
::
    >>> today = datetime.date.today()
    >>> now = datetime.datetime.now()

    >>> company, = Company.find([(
    ...     'party.name', '=',
    ...     'C3S SCE'
    ... )])
    >>> germany, = Country.find([('code', '=', 'DE')])
    >>> countries = Country.find([])

    >>> contribution_types = [
    ...     'composition',
    ...     'performance',
    ...     'text',
    ... ]

    >>> performance_types = [
    ...     'recording',
    ...     'producing',
    ...     'mastering',
    ...     'mixing',
    ... ]

    >>> allocation_types = [
    ...     'adaption',
    ...     'cover',
    ...     'remix',
    ... ]

    >>> weekdays = [
    ...     'monday',
    ...     'tuesday',
    ...     'wednesday',
    ...     'thursday',
    ...     'friday',
    ...     'saturday',
    ...     'sunday',
    ... ]

    >>> declaration_periods = [
    ...     'monthly',
    ...     'quarterly',
    ...     'yearly',
    ... ]

    >>> test_genres = '/shared/data/csv/genres.csv'
    >>> test_styles = '/shared/data/csv/styles.csv'
    >>> test_labels = '/shared/data/csv/labels.csv'
    >>> test_licenses = '/shared/data/csv/licenses.csv'
    >>> test_tariff_categories = '/shared/data/csv/tariff_categories.csv'
    >>> test_creation_roles = '/shared/data/csv/creation_roles.csv'
    >>> test_location_categories = '/shared/data/csv/location_categories.csv'
    >>> test_location_space_categories = '/shared/data/csv/location_space_categories.csv'
    >>> test_website_categories = '/shared/data/csv/website_categories.csv'
    >>> test_website_resource_categories = '/shared/data/csv/website_resource_categories.csv'
    >>> test_website_categories_website_resource_categories = '/shared/data/csv/website_categories-website_resource_categories.csv'
    >>> test_tariff_adjustment_categories = '/shared/data/csv/tariff_adjustment_categories.csv'
    >>> test_tariff_relevance_categories = '/shared/data/csv/tariff_relevance_categories.csv'

    >>> test_text = '''Lorem ipsum dolor sit amet, consetetur diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren.\n\nLorem ipsum.\n\nSea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.'''


Data
====

Collecting Societies
--------------------

C3S::

    >>> CollectingSociety(
    ...     name=company.party.name,
    ...     party=company.party,
    ...     represents_copyright=True,
    ...     represents_ancillary_copyright=True
    ... ).save()

Gema::

    >>> party = Party(name='GEMA')
    >>> _ = party.addresses.pop()
    >>> party_address = party.addresses.new(
    ...     street='Bayreuther Straße 37',
    ...     zip='10787',
    ...     city='Berlin',
    ...     country=germany
    ... )
    >>> party.save()
    >>> CollectingSociety(
    ...     name=party.name,
    ...     party=party,
    ...     represents_copyright=True,
    ...     represents_ancillary_copyright=False
    ... ).save()

GVL::

    >>> party = Party(name='GVL')
    >>> _ = party.addresses.pop()
    >>> party_address = party.addresses.new(
    ...     street='Podbielskiallee 64',
    ...     zip='14195',
    ...     city='Berlin',
    ...     country=germany
    ... )
    >>> party.save()
    >>> CollectingSociety(
    ...     name=party.name,
    ...     party=party,
    ...     represents_copyright=False,
    ...     represents_ancillary_copyright=True
    ... ).save()

Genres
------
::
    >>> with open(test_genres, 'r') as f:
    ...     reader = csv.DictReader(f, delimiter=delimiter, quotechar=quotechar)
    ...     i = 1
    ...     for genre in reader:
    ...         if debug and i > debug:
    ...             break
    ...         if label and i > label:
    ...             break
    ...         i += 1
    ...         Genre(
    ...             name=genre['name'],
    ...             description=genre['description']
    ...         ).save()

Styles
------
::
    >>> with open(test_styles, 'r') as f:
    ...     reader = csv.DictReader(f, delimiter=delimiter, quotechar=quotechar)
    ...     i = 1
    ...     for style in reader:
    ...         if debug and i > debug:
    ...             break
    ...         i += 1
    ...         Style(
    ...             name=style['name'],
    ...             description=style['description']
    ...         ).save()

Labels
------
::
    >>> with open(test_labels, 'r') as f:
    ...     reader = csv.DictReader(f, delimiter=delimiter, quotechar=quotechar)
    ...     i = 1
    ...     for label in reader:
    ...         if debug and i > debug:
    ...             break
    ...         i += 1
    ...         Label(
    ...             entity_creator=company.party,
    ...             name=label['name'],
    ...             gvl_code=label['gvl_code']
    ...         ).save()

Licenses
--------
::
    >>> with open(test_licenses, 'r') as f:
    ...     reader = csv.DictReader(f, delimiter=delimiter, quotechar=quotechar)
    ...     i = 1
    ...     for license in reader:
    ...         if debug and i > debug:
    ...             break
    ...         i += 1
    ...         License(
    ...             code=license['code'],
    ...             version=license['version'],
    ...             country=license['country'],
    ...             freedom_rank=int(license['freedom_rank']),
    ...             link=license['link'],
    ...             name=license['name']
    ...         ).save()

Tariff Systems
--------------
::
    >>> for i in range(1, tariff_systems + 1):
    ...     number = i
    ...     TariffSystem(
    ...         version="%s.0" % number,
    ...         valid_from=today
    ...     ).save()

Tariff Categories
-----------------
::
    >>> with open(test_tariff_categories, 'r') as f:
    ...     reader = csv.DictReader(f, delimiter=delimiter, quotechar=quotechar)
    ...     i = 1
    ...     for category in reader:
    ...         i += 1
    ...         TariffCategory(
    ...             name=category['name'],
    ...             code=category['code'],
    ...             description=category['description']
    ...         ).save()

Tariff Adjustment Categories
----------------------------
::
    >>> with open(test_tariff_adjustment_categories, 'r') as f:
    ...     reader = csv.DictReader(f, delimiter=delimiter, quotechar=quotechar)
    ...     i = 1
    ...     for category in reader:
    ...         i += 1
    ...         tcs = []
    ...         for tc in category['tariff_categories'].split(","):
    ...             tcs += TariffCategory.find(['code', '=', tc])
    ...         TariffAdjustmentCategory(
    ...             name=category['name'],
    ...             value_min=float(category['value_min']),
    ...             value_max=float(category['value_max']),
    ...             value_default=float(category['value_default']),
    ...             priority=int(category['priority']),
    ...             operation=category['operation'],
    ...             tariff_categories=tcs
    ...         ).save()

Tariff Relevance Categories
---------------------------
::
    >>> with open(test_tariff_relevance_categories, 'r') as f:
    ...     reader = csv.DictReader(f, delimiter=delimiter, quotechar=quotechar)
    ...     i = 1
    ...     for category in reader:
    ...         i += 1
    ...         tcs = []
    ...         for tc in category['tariff_categories'].split(","):
    ...             tcs += TariffCategory.find(['code', '=', tc])
    ...         TariffRelevanceCategory(
    ...             name=category['name'],
    ...             value_min=float(category['value_min']),
    ...             value_max=float(category['value_max']),
    ...             value_default=float(category['value_default']),
    ...             tariff_categories=tcs
    ...         ).save()

Tariffs
-------
::
    >>> tariff_systems = TariffSystem.find([])
    >>> tariff_categories = TariffCategory.find([])

    >>> for system in tariff_systems:
    ...     for category in tariff_categories:
    ...         Tariff(
    ...             system=system,
    ...             category=category
    ...         ).save()


Distribution Plans
------------------
::
    >>> for i in range(1, distribution_plans + 1):
    ...     number = i
    ...     DistributionPlan(
    ...         version="%s.0" % number,
    ...         valid_from=today
    ...     ).save()


Publisher
---------
::
    >>> for i in range(1, publisher + 1):
    ...     number = i
    ...     name = "Publisher %s" % str(number).zfill(3)
    ...     party = Party(name=name)
    ...     party.save()
    ...     Publisher(
    ...         entity_creator=company.party,
    ...         party=party,
    ...         name=name,
    ...     ).save()

Web Users
---------

Role: Licenser::

    >>> for i in range(1, group_artists * new_solo_artists_per_group + 1):
    ...     number = i
    ...     total = i
    ...     birthdate = datetime.date(
    ...         random.randint(1950, 2000),
    ...         random.randint(1, 12),
    ...         random.randint(1, 28))
    ...     firstname = "Registered Name"
    ...     lastname = "%s" % str(total).zfill(3)
    ...     web_user = WebUser(
    ...         email='licenser%s@collecting_society.test' % number,
    ...         nickname=firstname + ' ' + lastname,
    ...         password="password",
    ...         opt_in_state='opted-in'
    ...     )
    ...     roles = WebUserRole.find([('code', '=', 'licenser')])
    ...     web_user.roles.extend(roles)
    ...     web_user.default_role = 'licenser'
    ...     web_user.save()
    ...     web_user.party.firstname = firstname
    ...     web_user.party.lastname = lastname
    ...     web_user.party.name = firstname + ' ' + lastname
    ...     web_user.party.repertoire_terms_accepted = True
    ...     web_user.party.birthdate = birthdate
    ...     web_user.party.save()

Role: Licensee::

    >>> for j in range(1, webuser_licensee + 1):
    ...     number = j
    ...     total = i + j
    ...     birthdate = datetime.date(
    ...         random.randint(1950, 2000),
    ...         random.randint(1, 12),
    ...         random.randint(1, 28))
    ...     firstname = "Registered Name"
    ...     lastname = "%s" % str(total).zfill(3)
    ...     web_user = WebUser(
    ...         email='licensee%s@collecting_society.test' % number,
    ...         nickname=firstname + ' ' + lastname,
    ...         password="password",
    ...         opt_in_state='opted-in'
    ...     )
    ...     roles = WebUserRole.find([('code', '=', 'licensee')])
    ...     web_user.roles.extend(roles)
    ...     web_user.default_role = 'licensee'
    ...     web_user.save()
    ...     web_user.party.firstname = firstname
    ...     web_user.party.lastname = lastname
    ...     web_user.party.name = firstname + ' ' + lastname
    ...     web_user.party.repertoire_terms_accepted = True
    ...     web_user.party.birthdate = birthdate
    ...     web_user.party.save()

Role: All::

    >>> for k in range(1, webuser_all_roles + 1):
    ...     number = k
    ...     total = i + j + k
    ...     birthdate = datetime.date(
    ...         random.randint(1950, 2000),
    ...         random.randint(1, 12),
    ...         random.randint(1, 28))
    ...     firstname = "Registered Name"
    ...     lastname = "%s" % str(total).zfill(3)
    ...     web_user = WebUser(
    ...         email='allroles%s@collecting_society.test' % number,
    ...         nickname=firstname + ' ' + lastname,
    ...         password="password",
    ...         opt_in_state='opted-in'
    ...     )
    ...     roles = WebUserRole.find([
    ...         'OR',
    ...         ('code', '=', 'licenser'),
    ...         ('code', '=', 'licensee')])
    ...     web_user.roles.extend(roles)
    ...     web_user.default_role = roles[k - 1 % len(roles)].code
    ...     web_user.save()
    ...     web_user.party.firstname = firstname
    ...     web_user.party.lastname = lastname
    ...     web_user.party.name = firstname + ' ' + lastname
    ...     web_user.party.repertoire_terms_accepted = True
    ...     web_user.party.birthdate = birthdate
    ...     web_user.party.save()

Artists
-------

Create group and members artists::

    >>> for i in range(1, group_artists + 1):
    ...     number = i
    ...     web_user_number = (number - 1) * new_solo_artists_per_group + 1
    ...     web_user, = WebUser.find([(
    ...         'nickname', '=', 'Registered Name %s' % str(
    ...             web_user_number).zfill(3)
    ...     )])
    ...
    ...     # group artists
    ...     group_artist = Artist(
    ...         name="Group Artist %s" % str(number).zfill(3),
    ...         group=True,
    ...         entity_creator=web_user.party,
    ...         entity_origin='direct',
    ...         commit_state='commited',
    ...         claim_state='claimed',
    ...         description=test_text
    ...     )
    ...     group_artist.save()
    ...
    ...     # members
    ...     for j in range(1, new_solo_artists_per_group + 1):
    ...         number = (i - 1) * new_solo_artists_per_group + j
    ...         web_user, = WebUser.find([(
    ...             'nickname', '=', 'Registered Name %s' % str(
    ...                 number).zfill(3)
    ...         )])
    ...         solo_artist = group_artist.solo_artists.new(
    ...             name="Solo Artist %s" % str(number).zfill(3),
    ...             group=False,
    ...             party=web_user.party,
    ...             entity_creator=web_user.party,
    ...             entity_origin='direct',
    ...             commit_state='commited',
    ...             claim_state='claimed',
    ...             description=test_text
    ...         )
    ...         solo_artist.save()
    ...         group_artist.save()
    ...
    ...     # foreign members
    ...     for k in range(1, foreign_artists_per_group + 1):
    ...         number = (i - 1) * foreign_artists_per_group + k
    ...         name = "Foreign Member Solo Artist %s" % str(number).zfill(3)
    ...         foreign_solo_artist_party = Party(
    ...             name=name
    ...         )
    ...         email = foreign_solo_artist_party.contact_mechanisms.new(
    ...             type='email',
    ...             value="foreign_member_%s@rep.test" % number
    ...         )
    ...         foreign_solo_artist_party.save()
    ...         foreign_solo_artist = group_artist.solo_artists.new(
    ...             name=name,
    ...             group=False,
    ...             party=foreign_solo_artist_party,
    ...             entity_creator=web_user.party,
    ...             entity_origin='indirect',
    ...             commit_state='uncommited',
    ...             claim_state='unclaimed'
    ...         )
    ...         foreign_solo_artist.save()
    ...         group_artist.save()

Add existing solo artists to group artists::

    >>> groups = Artist.find([
    ...     ('claim_state', '!=', 'unclaimed'),
    ...     ('group', '=', True)])
    >>> for i, group in enumerate(groups):
    ...     solos = Artist.find([
    ...         ('claim_state', '!=', 'unclaimed'),
    ...         ('group', '=', False)])
    ...     for j in range(0, add_solo_artists_per_group):
    ...         if solos <= group.solo_artists:
    ...             continue
    ...         solo = random.choice(solos)
    ...         while solo in group.solo_artists:
    ...             solo = random.choice(solos)
    ...         group.solo_artists.extend([solo])
    ...         group.save()

CreationRoles
-------------
::
    >>> with open(test_creation_roles, 'r') as f:
    ...     reader = csv.DictReader(f, delimiter=delimiter, quotechar=quotechar)
    ...     i = 1
    ...     for role in reader:
    ...         if debug and i > debug:
    ...             break
    ...         i += 1
    ...         artists = Artist.find([
    ...             ('claim_state', '!=', 'unclaimed'),
    ...             ('group', '!=', True)])
    ...         CreationRole(
    ...             entity_creator=random.choice(artists).party,
    ...             name=role['name'],
    ...             description=role['description']
    ...         ).save()

Releases
--------
::
    >>> artists = Artist.find([('claim_state', '!=', 'unclaimed')])

    >>> for i in range(1, len(artists) + 1):
    ...     for j in range(1, releases_per_artist + 1):
    ...         number = (i - 1) * releases_per_artist + j
    ...         owner = artists[i-1]
    ...         creator = owner
    ...         if creator.group:
    ...             for solo in creator.solo_artists:
    ...                 if solo.claim_state != 'unclaimed':
    ...                     creator = solo
    ...                     break
    ...         publishers = Publisher.find([])
    ...         labels = Label.find([])
    ...         genres = Genre.find([])
    ...         styles = Style.find([])
    ...         release_date = datetime.date(
    ...             random.randint(1800, 2019),
    ...             random.randint(1, 12),
    ...             random.randint(1, 28))
    ...         isrc = ''.join(random.sample(string.ascii_uppercase, 3)) + \
    ...             str(random.randint(1,999999999)).zfill(9)
    ...         release = Release(
    ...             type="artist",
    ...             entity_creator=creator.party,
    ...             commit_state='commited',
    ...             claim_state='claimed',
    ...             title="Release %s" % str(number).zfill(3),
    ...             genres=random.sample(genres, min(
    ...                 genres_per_release, len(genres))),
    ...             styles=random.sample(styles, min(
    ...                 styles_per_release, len(styles))),
    ...             warning='WARNING: This is testdata!',
    ...             copyright_date=release_date - datetime.timedelta(10),
    ...             production_date=release_date - datetime.timedelta(30),
    ...             release_date=release_date,
    ...             distribution_territory=random.choice(countries).code,
    ...             label=random.choice(labels),
    ...             label_catalog_number=str(random.randint(10000, 99999)),
    ...             publisher=random.choice(publishers)
    ...         )
    ...         if release.release_date.year >= 2000:
    ...             release.online_release_date = release_date
    ...         if random.random() < release_cancellation_chance:
    ...             cancellation_date = release_date + datetime.timedelta(300)
    ...             release.release_cancellation_date = cancellation_date
    ...             if release.online_release_date:
    ...                 release.online_cancellation_date = cancellation_date
    ...         owner_artist, = Artist.find([('id', '=', owner.id)])
    ...         release.artists.append(owner_artist)
    ...         release.save()

Creations
---------
::
    >>> releases = Release.find([('claim_state', '!=', 'unclaimed')])

    >>> for i in range(1, len(releases) + 1):
    ...     for j in range(1, creations_per_release + 1):
    ...         number = (i - 1) * creations_per_release + j
    ...         artist_number = divmod(i-1, releases_per_artist)[0]
    ...         artist = artists[artist_number]
    ...         creator = artist
    ...         if creator.group:
    ...             creator = creator.solo_artists[0]
    ...         # creation
    ...         creation = Creation(
    ...             title="Title of Song %s" % str(number).zfill(3),
    ...             commit_state='commited',
    ...             claim_state='claimed',
    ...             entity_creator=creator.party,
    ...             lyrics=test_text,
    ...             artist=artist
    ...         )
    ...         creation.save()
    ...
    ...         # tariff categories
    ...         css = CollectingSociety.find([(
    ...             'represents_copyright', '=', True)])
    ...         tariffcs = TariffCategory.find([])
    ...         categories = random.sample(
    ...             tariffcs, random.randint(1, len(tariffcs)))
    ...         for category in categories:
    ...             CreationTariffCategory(
    ...                 creation=creation,
    ...                 category=category,
    ...                 collecting_society=random.choice(css)
    ...             ).save()
    ...
    ...         # release creation
    ...         licenses = License.find([])
    ...         cr = creation.releases.new()
    ...         cr.creation=creation
    ...         cr.release=releases[i-1]
    ...         cr.title="Release Title of Song %s" % str(number).zfill(3)
    ...         cr.medium_number=1
    ...         cr.track_number=j
    ...         cr.license=random.choice(licenses)
    ...         cr.save()
    ...         creation.save()

Derivatives
-----------
::
    >>> creations = Creation.find([('claim_state', '!=', 'unclaimed')])

Exisiting creations::

    >>> for i in range(0, len(creations)):
    ...     creation = creations[i]
    ...     if not creation.release:
    ...         continue
    ...     others = []
    ...     for other in creations:
    ...         if not other.release or other.id == creation.id:
    ...             continue
    ...         others.append(other)
    ...     originals = random.sample(others, min(
    ...         originals_per_creation, len(others)))
    ...     for original in originals:
    ...         cor = creation.original_relations.new()
    ...         cor.original_creation = original
    ...         cor.derivative_creation = creation
    ...         cor.allocation_type = random.choice(allocation_types)
    ...         cor.save()
    ...         creation.save()

Foreign originals::

    >>> for i in range(0, len(creations)):
    ...     creation = creations[i]
    ...     for j in range(1, foreign_originals_per_creation + 1):
    ...         number = i * foreign_originals_per_creation + j
    ...         foreign_artist = Artist(
    ...             name="Foreign Original Artist %s" % str(number).zfill(3),
    ...             group=False,
    ...             entity_creator=creation.entity_creator,
    ...             entity_origin='indirect',
    ...             commit_state='uncommited',
    ...             claim_state='unclaimed'
    ...         )
    ...         foreign_artist.save()
    ...         foreign_original = Creation(
    ...             title="Foreign Original Song %s" % str(number).zfill(3),
    ...             artist=foreign_artist,
    ...             entity_creator=creation.entity_creator,
    ...             entity_origin='indirect',
    ...             commit_state='uncommited',
    ...             claim_state='unclaimed'
    ...         )
    ...         foreign_original.save()
    ...
    ...         cor = creation.original_relations.new()
    ...         cor.original_creation = foreign_original
    ...         cor.derivative_creation = creation
    ...         cor.allocation_type = random.choice(allocation_types)
    ...         cor.save()
    ...         creation.save()

Contributions
-------------
::
    >>> creations = Creation.find([('claim_state', '!=', 'unclaimed')])

Existing solo or member artists::

    >>> for i in range(0, len(creations)):
    ...     creation = creations[i]
    ...     artist = creation.artist
    ...     contributors = [artist]
    ...     if artist.group:
    ...         contributors = artist.solo_artists
    ...     roles = CreationRole.find([])
    ...
    ...     # composer
    ...     num_composers = random.randint(0, min(
    ...         max_composers_per_creation, len(contributors)))
    ...     for composer in random.sample(contributors, num_composers):
    ...         # composition
    ...         cc = CreationContribution()
    ...         cc.creation = creation
    ...         cc.artist = composer
    ...         cc.type = 'composition'
    ...         cc.save()
    ...         cr = CreationContributionRole()
    ...         cr.contribution = cc
    ...         cr.role = random.choice(roles)
    ...         cr.save()
    ...
    ...     # recorder
    ...     num_recorders = random.randint(0, min(
    ...         max_recorders_per_creation, len(contributors)))
    ...     for recorder in random.sample(contributors, num_recorders):
    ...         # composition
    ...         cc = CreationContribution()
    ...         cc.creation = creation
    ...         cc.artist = recorder
    ...         cc.type = 'performance'
    ...         cc.performance = 'recording'
    ...         cc.save()
    ...         cr = CreationContributionRole()
    ...         cr.contribution = cc
    ...         cr.role = random.choice(roles)
    ...         cr.save()
    ...
    ...     # texter
    ...     num_texters = random.randint(0, min(
    ...         max_texters_per_creation, len(contributors)))
    ...     for texter in random.sample(contributors, num_texters):
    ...         CreationContribution(
    ...             creation=creation,
    ...             artist=texter,
    ...             type='text'
    ...         ).save()
    ...
    ...     # producer
    ...     nrss = CollectingSociety.find([(
    ...         'represents_ancillary_copyright', '=', True)])
    ...     num_producers = random.randint(0, min(
    ...         max_producers_per_creation, len(contributors)))
    ...     for producer in random.sample(contributors, num_producers):
    ...         CreationContribution(
    ...             creation=creation,
    ...             artist=producer,
    ...             type='performance',
    ...             performance='producing',
    ...             neighbouring_rights_society=random.choice(nrss),
    ...         ).save()
    ...
    ...     # master
    ...     nrss = CollectingSociety.find([(
    ...         'represents_ancillary_copyright', '=', True)])
    ...     num_masters = random.randint(0, min(
    ...         max_masters_per_creation, len(contributors)))
    ...     for master in random.sample(contributors, num_masters):
    ...         CreationContribution(
    ...             creation=creation,
    ...             artist=master,
    ...             type='performance',
    ...             performance='mastering',
    ...             neighbouring_rights_society=random.choice(nrss),
    ...         ).save()
    ...
    ...     # mixer
    ...     nrss = CollectingSociety.find([(
    ...         'represents_ancillary_copyright', '=', True)])
    ...     num_mixers = random.randint(0, min(
    ...         max_mixers_per_creation, len(contributors)))
    ...     for mixer in random.sample(contributors, num_mixers):
    ...         CreationContribution(
    ...             creation=creation,
    ...             artist=mixer,
    ...             type='performance',
    ...             performance='mixing',
    ...             neighbouring_rights_society=random.choice(nrss),
    ...         ).save()

Foreign contributions::

    >>> number = 0
    >>> for i in range(0, len(creations)):
    ...     if random.random() > foreign_contribution_chance_per_creation:
    ...         continue
    ...     number = number + 1
    ...     creation = creations[i]
    ...     roles = CreationRole.find([])
    ...     nrss = CollectingSociety.find([(
    ...         'represents_ancillary_copyright', '=', True)])
    ...
    ...     # foreign artist
    ...     name = "Foreign Contributor Solo Artist %s" % str(
    ...         number).zfill(3)
    ...     foreign_solo_artist_party = Party(
    ...         name=name
    ...     )
    ...     email = foreign_solo_artist_party.contact_mechanisms.new(
    ...         type='email',
    ...         value="foreign_contributor_%s@rep.test" % number
    ...     )
    ...     foreign_solo_artist_party.save()
    ...     foreign_solo_artist = Artist(
    ...         name=name,
    ...         group=False,
    ...         party=foreign_solo_artist_party,
    ...         entity_creator=creation.entity_creator,
    ...         entity_origin='indirect',
    ...         commit_state='uncommited',
    ...         claim_state='unclaimed'
    ...     )
    ...     foreign_solo_artist.save()
    ...
    ...     # contribution
    ...     cc = CreationContribution()
    ...     cc.creation = creation
    ...     cc.artist = foreign_solo_artist
    ...     cc.type = random.choice(contribution_types)
    ...     if cc.type == 'performance':
    ...         cc.performance = random.choice(performance_types)
    ...         if random.choice([False, True]):
    ...             cc.neighbouring_rights_society = random.choice(nrss)
    ...     cc.save()
    ...
    ...     # contribution role
    ...     if cc.type == 'composition' or cc.performance == 'recording':
    ...         cr = CreationContributionRole()
    ...         cr.contribution = cc
    ...         cr.role = random.choice(roles)
    ...         cr.save()

Sampler Releases
----------------

    >>> artists = Artist.find([('claim_state', '!=', 'unclaimed')])

    >>> for i in range(1, sampler_releases + 1):
    ...     number = i
    ...     solos = Artist.find([
    ...         ('claim_state', '!=', 'unclaimed'),
    ...         ('group', '=', False)])
    ...     labels = Label.find([])
    ...     genres = Genre.find([])
    ...     styles = Style.find([])
    ...     isrc = ''.join(random.sample(string.ascii_uppercase, 3)) + \
    ...         str(random.randint(1,999999999)).zfill(9)
    ...     creations = Creation.find([('claim_state', '!=', 'unclaimed')])
    ...     publishers = Publisher.find([])
    ...     creator = random.choice(solos)
    ...     web_user, = WebUser.find([('party.id', '=', creator.party.id)])
    ...
    ...     # release
    ...     release = Release(
    ...         type="compilation",
    ...         entity_creator=creator.party,
    ...         commit_state='commited',
    ...         claim_state='claimed',
    ...         title="Sampler %s" % str(number).zfill(3),
    ...         genres=random.sample(genres, min(
    ...             genres_per_release, len(genres))),
    ...         styles=random.sample(styles, min(
    ...             styles_per_release, len(styles))),
    ...         warning='WARNING: This is testdata!',
    ...         distribution_territory=random.choice(countries).code,
    ...         label=random.choice(labels),
    ...         label_catalog_number=str(random.randint(10000, 99999)),
    ...         publisher=random.choice(publishers)
    ...     )
    ...     release.save()
    ...
    ...     # release creation
    ...     tracks = random.sample(creations, creations_per_sampler)
    ...     last_date = datetime.date(1,1,1)
    ...     for i in range(0, len(tracks)):
    ...         track = tracks[i]
    ...         if track.release.release_date > last_date:
    ...             last_date = track.release.release_date
    ...         licenses = License.find([])
    ...         rc = ReleaseTrack()
    ...         rc.creation=track
    ...         rc.release=release
    ...         rc.title="Renamed Song %s on a Compilation" % str(
    ...             number).zfill(3)
    ...         rc.medium_number=1
    ...         rc.track_number=i
    ...         rc.license=random.choice(licenses)
    ...         rc.save()
    ...
    ...     release.production_date = last_date + datetime.timedelta(50)
    ...     release.copyright_date = last_date + datetime.timedelta(80)
    ...     release.release_date = last_date + datetime.timedelta(100)
    ...     release.online_release_date = last_date + datetime.timedelta(100)
    ...     release.save()

Split Releases
--------------

    >>> for i in range(1, split_releases + 1):
    ...     number = i
    ...     artists = Artist.find([('claim_state', '!=', 'unclaimed')])
    ...     labels = Label.find([])
    ...     genres = Genre.find([])
    ...     styles = Style.find([])
    ...     isrc = ''.join(random.sample(string.ascii_uppercase, 3)) + \
    ...         str(random.randint(1,999999999)).zfill(9)
    ...     creations = Creation.find([('claim_state', '!=', 'unclaimed')])
    ...     publishers = Publisher.find([])
    ...
    ...     splits = random.sample(artists, artists_per_split_release)
    ...     creator = splits[0]
    ...     if creator.group:
    ...         creator = creator.solo_artists[0]
    ...
    ...     # release
    ...     release = Release(
    ...         type='split',
    ...         entity_creator=creator.party,
    ...         commit_state='commited',
    ...         claim_state='claimed',
    ...         title="Split Release %s" % str(number).zfill(3),
    ...         genres=random.sample(genres, min(
    ...             genres_per_release, len(genres))),
    ...         styles=random.sample(styles, min(
    ...             styles_per_release, len(styles))),
    ...         warning='WARNING: This is testdata!',
    ...         distribution_territory='Germany',
    ...         label=random.choice(labels),
    ...         label_catalog_number='12345',
    ...         publisher=random.choice(publishers)
    ...     )
    ...     for split in splits:
    ...         release.artists.append(split)
    ...     release.save()
    ...
    ...     # release creation
    ...     last_date = datetime.date(1,1,1)
    ...     for split in splits:
    ...         tracks = random.sample(split.creations,
    ...             min(creations_per_split_artist,len(split.creations)))
    ...         for i in range(0, len(tracks)):
    ...             track = tracks[i]
    ...             if track.release.release_date > last_date:
    ...                 last_date = track.release.release_date
    ...             licenses = License.find([])
    ...             rc = ReleaseTrack()
    ...             rc.creation=track
    ...             rc.release=release
    ...             rc.title="Renamed Song %s on a Split Release" % str(
    ...                 number).zfill(3)
    ...             rc.medium_number=1
    ...             rc.track_number=i
    ...             rc.license=random.choice(licenses)
    ...             rc.save()
    ...
    ...     release.production_date = last_date + datetime.timedelta(50)
    ...     release.copyright_date = last_date + datetime.timedelta(80)
    ...     release.release_date = last_date + datetime.timedelta(100)
    ...     release.online_release_date = last_date + datetime.timedelta(100)
    ...     release.save()

Artist Playlists
----------------

    >>> artists = Artist.find([('entity_origin', '=', 'direct')])

    >>> for artist in artists:
    ...     party = artist.party
    ...     if artist.group:
    ...         party = artist.solo_artists[0].party
    ...     if not party:
    ...         continue
    ...
    ...     for i in range(0, playlists_per_artist):
    ...
    ...         # playlist
    ...         playlist = ArtistPlaylist(
    ...             artist=artist,
    ...             public=True,
    ...             template=True,
    ...             entity_origin='direct',
    ...             entity_creator=party
    ...         )
    ...         playlist.save()
    ...
    ...         # playlist items
    ...         creations = Creation.find([('artist.id', '=', artist.id)])
    ...         artist_items = random.sample(
    ...             creations,
    ...             min(artist_creations_per_playlist, len(creations))
    ...         )
    ...         creations = Creation.find([('artist.id', '!=', artist.id)])
    ...         foreign_items = random.sample(
    ...             creations,
    ...             min(foreign_creations_per_playlist, len(creations))
    ...         )
    ...         for i, item in enumerate(artist_items + foreign_items):
    ...             ArtistPlaylistItem(
    ...                 playlist=playlist,
    ...                 creation=item,
    ...                 position=i + 1,
    ...                 entity_origin='direct',
    ...                 entity_creator=party
    ...             ).save()

Archiving
---------
::
    >>> for i in range(1, storehouses + 1):
    ...     number = i
    ...     host = uuid_host=str(uuid.uuid4())
    ...
    ...     # admin
    ...     admin = User(
    ...         name="Storehouse Admin %s" % str(number).zfill(3),
    ...         login="storehouse%s" % str(number).zfill(3),
    ...         password="%s" % number
    ...     )
    ...     admin.save()
    ...
    ...     # storehouse
    ...     storehouse = Storehouse(
    ...         code="%s" % str(number).zfill(3),
    ...         details="Storehouse in City %s" % str(number).zfill(3),
    ...         user=admin
    ...     )
    ...     storehouse.save()
    ...
    ...     # harddisk labels
    ...     for j in range(1, harddisklabels_per_storehouse + 1):
    ...         harddisk_label = HarddiskLabel()
    ...         harddisk_label.save()
    ...
    ...         # harddisks
    ...         for k in range(1, harddisks_per_harddisklabel + 1):
    ...             harddisk = Harddisk(
    ...                 label=harddisk_label,
    ...                 version=1,
    ...                 storehouse=storehouse,
    ...                 location='SomeMachine',
    ...                 closed=False,
    ...                 raid_type="1",
    ...                 raid_number=str(k),
    ...                 raid_total=str(harddisks_per_harddisklabel),
    ...                 uuid_host=host,
    ...                 uuid_harddisk=str(uuid.uuid4()),
    ...                 user=admin,
    ...                 online=True,
    ...                 state='in_use'
    ...             )
    ...             harddisk.save()
    ...
    ...             # filesystem labels
    ...             for l in range(1, filesystemlabels_per_harddisk + 1):
    ...                 filesystem_label = FilesystemLabel()
    ...                 filesystem_label.save()
    ...
    ...                 # filesystems
    ...                 for m in range(1, filesystems_per_filesystemlabel + 1):
    ...                     filesystem = Filesystem(
    ...                         label=filesystem_label,
    ...                         harddisk=harddisk,
    ...                         closed=False,
    ...                         partition_number=m,
    ...                         uuid_partition=str(uuid.uuid4()),
    ...                         uuid_raid=str(uuid.uuid4()),
    ...                         uuid_raid_sub=str(uuid.uuid4()),
    ...                         uuid_crypto=str(uuid.uuid4()),
    ...                         uuid_lvm=str(uuid.uuid4()),
    ...                         uuid_filesystem=str(uuid.uuid4())
    ...                     )
    ...                     filesystem.save()

Contents
--------
::
    >>> creations = Creation.find([('claim_state', '!=', 'unclaimed')])
    >>> filesystem_labels = FilesystemLabel.find([])

Audio Files::

    >>> audio_number = 1
    >>> for i in range(1, len(creations) + 1):
    ...     if random.random() > audio_content_chance_per_creation:
    ...         continue
    ...     creation = creations[i - 1]
    ...     artist = creation.artist
    ...     if artist.group:
    ...         artist = artist.solo_artists[0]
    ...
    ...     # audio
    ...     c = Content()
    ...     c.uuid = str(uuid.uuid4())
    ...     c.commit_state = 'commited'
    ...     c.entity_creator = artist.party
    ...     c.category = 'audio'
    ...     c.creation = creation
    ...     # file metadata
    ...     c.name = "audio_%s.wav" % str(audio_number).zfill(3)
    ...     c.size = 12345
    ...     c.mime_type = 'audio/x-wav'
    ...     # file processing
    ...     c.path = '/some/path'
    ...     c.preview_path = '/some/preview/path'
    ...     c.filesystem_label = random.choice(filesystem_labels)
    ...     c.processing_state = 'archived'
    ...     c.storage_hostname = 'archive_machine'
    ...     c.mediation = False
    ...     # low level audio metadata
    ...     c.length = 42.0
    ...     c.channels = 2
    ...     c.sample_rate = 48000
    ...     c.sample_width = 16
    ...     # high level metadata
    ...     c.metadata_artist = creation.artist.name
    ...     c.metadata_title = creation.title
    ...     c.metadata_release = creation.release.title
    ...     c.metadata_release_date = str(creation.release.release_date)
    ...     c.metadata_track_number = "0"
    ...     c.save()
    ...     audio_number += 1

Sheet Pdfs::

    >>> sheet_number = 1
    >>> for i in range(1, len(creations) + 1):
    ...     if random.random() > sheet_content_chance_per_creation:
    ...         continue
    ...     creation = creations[i - 1]
    ...     artist = creation.artist
    ...     if artist.group:
    ...         artist = artist.solo_artists[0]
    ...
    ...     c = Content()
    ...     c.uuid = str(uuid.uuid4())
    ...     c.entity_creator = artist.party
    ...     c.category = 'sheet'
    ...     c.creation = creation
    ...     # file metadata
    ...     c.name = "sheet_%s.pdf" % str(sheet_number).zfill(3)
    ...     c.size = 54321
    ...     c.mime_type = 'application/pdf'
    ...     # file processing
    ...     c.path = '/some/path'
    ...     c.filesystem_label = random.choice(filesystem_labels)
    ...     c.processing_state = 'archived'
    ...     c.storage_hostname = 'archive_machine'
    ...     c.mediation = False
    ...     c.save()
    ...     sheet_number += 1

Location Categories
-------------------
::
    >>> with open(test_location_categories, 'r') as f:
    ...     reader = csv.DictReader(f, delimiter=delimiter, quotechar=quotechar)
    ...     i = 1
    ...     for category in reader:
    ...         i += 1
    ...         LocationCategory(
    ...             name=category['name'],
    ...             code=category['code'],
    ...             description=category['description']
    ...         ).save()

Location Space Categories
-------------------------
::
    >>> with open(test_location_space_categories, 'r') as f:
    ...     reader = csv.DictReader(f, delimiter=delimiter, quotechar=quotechar)
    ...     i = 1
    ...     for category in reader:
    ...         i += 1
    ...         LocationSpaceCategory(
    ...             name=category['name'],
    ...             code=category['code'],
    ...             description=category['description']
    ...         ).save()

Website Categories
------------------
::
    >>> with open(test_website_categories, 'r') as f:
    ...     reader = csv.DictReader(f, delimiter=delimiter, quotechar=quotechar)
    ...     i = 1
    ...     for category in reader:
    ...         i += 1
    ...         WebsiteCategory(
    ...             name=category['name'],
    ...             code=category['code'],
    ...             description=category['description']
    ...         ).save()

Website Resource Categories
---------------------------
::
    >>> with open(test_website_resource_categories, 'r') as f:
    ...     reader = csv.DictReader(f, delimiter=delimiter, quotechar=quotechar)
    ...     i = 1
    ...     for category in reader:
    ...         i += 1
    ...         wcs = []
    ...         for wc in category['website_categories'].split(","):
    ...             wcs += WebsiteCategory.find(['code', '=', wc])
    ...         WebsiteResourceCategory(
    ...             name=category['name'],
    ...             code=category['code'],
    ...             description=category['description'],
    ...             website_categories=wcs
    ...         ).save()

Identifiers
-----------

Party Identifiers::

    >>> parties = Party.find([])
    >>> space_ipi, = PartyIdentifierSpace.find(
    ...     [('name', '=', 'IPI')])
    >>> space_isni, = PartyIdentifierSpace.find(
    ...     [('name', '=', 'ISNI')])
    >>> space_ddexpi, = PartyIdentifierSpace.find(
    ...     [('name', '=', 'DDEX Party Identifier')])

    >>> for i in range(1, len(parties) + 1):
    ...     number = i
    ...     party = parties[i - 1]
    ...     # ipi
    ...     identifier = PartyIdentifier(
    ...         party = party,
    ...         space = space_ipi,
    ...         id_code = "%s" % str(number).zfill(11)
    ...     ).save()
    ...     # isni
    ...     identifier = PartyIdentifier(
    ...         party = party,
    ...         space = space_isni,
    ...         id_code = "%s" % str(number).zfill(16)
    ...     ).save()
    ...     # ddexpi
    ...     identifier = PartyIdentifier(
    ...         party = party,
    ...         space = space_ddexpi,
    ...         id_code = "%s-%s-%s-%s" % (
    ...             'PA', 'DPIDA', str(number).zfill(10), 'G'
    ...         )
    ...     ).save()

Artist Identifiers::

    >>> artists = Artist.find([])
    >>> space_ipn, = ArtistIdentifierSpace.find(
    ...     [('name', '=', 'IPN')])

    >>> for i in range(1, len(artists) + 1):
    ...     number = i
    ...     artist = artists[i - 1]
    ...     # ipn
    ...     identifier = ArtistIdentifier(
    ...         artist = artist,
    ...         space = space_ipn,
    ...         id_code = "%s" % str(number).zfill(11)
    ...     ).save()

Release Identifiers::

    >>> releases = Release.find([])
    >>> space_grid, = ReleaseIdentifierSpace.find(
    ...     [('name', '=', 'GRid')])
    >>> space_eanupc, = ReleaseIdentifierSpace.find(
    ...     [('name', '=', 'EAN/UPC')])

    >>> for i in range(1, len(releases) + 1):
    ...     number = i
    ...     release = releases[i - 1]
    ...     # grid
    ...     identifier = ReleaseIdentifier(
    ...         release = release,
    ...         space = space_grid,
    ...         id_code = "%s-%s-%s-%s" % (
    ...             'A1', 'ABCDE', str(number).zfill(10), 'M'
    ...         )
    ...     ).save()
    ...     # eanupc
    ...     identifier = ReleaseIdentifier(
    ...         release = release,
    ...         space = space_eanupc,
    ...         id_code = "%s" % str(number).zfill(13)
    ...     ).save()

Creation Identifiers::

    >>> creations = Creation.find([])
    >>> space_hfa, = CreationIdentifierSpace.find(
    ...     [('name', '=', 'HFA Song Code')])
    >>> space_isrc, = CreationIdentifierSpace.find(
    ...     [('name', '=', 'ISRC')])
    >>> space_iswc, = CreationIdentifierSpace.find(
    ...     [('name', '=', 'ISWC')])
    >>> space_cwr, = CreationIdentifierSpace.find(
    ...     [('name', '=', 'CWR')])

    >>> for i in range(1, len(creations) + 1):
    ...     number = i
    ...     creation = creations[i - 1]
    ...     # hfa
    ...     identifier = CreationIdentifier(
    ...         creation = creation,
    ...         space = space_hfa,
    ...         id_code = "%s" % str(number).zfill(6)
    ...     ).save()
    ...     # isrc
    ...     identifier = CreationIdentifier(
    ...         creation = creation,
    ...         space = space_isrc,
    ...         id_code = "%s-%s-%s-%s" % (
    ...             'DE', 'A00', '20', str(number).zfill(5)
    ...         )
    ...     ).save()
    ...     # iswc
    ...     identifier = CreationIdentifier(
    ...         creation = creation,
    ...         space = space_iswc,
    ...         id_code = "%s-%s.%s.%s-%s" % (
    ...             'T',
    ...             str(number / 1000000).zfill(3),
    ...             str(number / 1000).zfill(3),
    ...             str(number % 1000).zfill(3),
    ...             'C'
    ...         )
    ...     ).save()
    ...     # cwr
    ...     identifier = CreationIdentifier(
    ...         creation = creation,
    ...         space = space_cwr,
    ...         id_code = "%s%s%s%s_%s.V%s" % (
    ...             'CW', 20, str(number).zfill(4), 'SSS', 'RRR', 21
    ...         )
    ...     ).save()

Licensee Usecase: Playing / Bar
-------------------------------
::
    >>> licensees = WebUser.find(
    ...     [('roles.code', '=', 'licensee')])
    >>> location_categories = LocationCategory.find(
    ...     [('code', 'in', ['B', 'N'])])
    >>> location_space_categories = LocationSpaceCategory.find([])
    >>> tariff_playing = Tariff.find(
    ...     [('category.name', '=', 'Playing')])[-1]
    >>> creations = Creation.find([])
    >>> chars_fingerprint = string.digits + string.letters

    >>> for i in range(0, len(licensees)):
    ...     licensee = licensees[i - 1]
    ...
    ...     for j in range(1, licensee_playing_bars + 1):
    ...         number = i * licensee_playing_bars + j
    ...
    ...         # location
    ...         location = Location(
    ...             name="Location Bar %s" % str(number).zfill(3),
    ...             category=random.choice(location_categories),
    ...             party=licensee.party,
    ...             public=True,
    ...             latitude=random.random()*180-90,
    ...             longitude=random.random()*360-180,
    ...             estimated_turnover_gastronomy=decimal.Decimal(
    ...                 random.randint(1000, 100000)
    ...             )
    ...         )
    ...         location.save()
    ...
    ...         # opening hours
    ...         for d in range(0, len(weekdays)):
    ...             if random.random() < 0.5:
    ...                 continue
    ...             LocationIndicatorsPeriod(
    ...                 location_indicators=location.estimated_indicators,
    ...                 start_weekday=weekdays[d],
    ...                 start_time=datetime.time(
    ...                     hour=random.choice(range(0,17)),
    ...                     minute=random.choice([0,30])
    ...                 ),
    ...                 end_weekday=weekdays[d],
    ...                 end_time=datetime.time(
    ...                     hour=random.choice(range(17,24)),
    ...                     minute=random.choice([0,30])
    ...                 )
    ...             ).save()
    ...
    ...         # location spaces
    ...         for lsc in range(0, len(location_space_categories)):
    ...             category = location_space_categories[lsc]
    ...             if lsc and random.random() > 0.5:
    ...                 continue
    ...             LocationSpace(
    ...                 location=location,
    ...                 category=category,
    ...                 estimated_size=random.randint(10,100)
    ...             ).save()
    ...
    ...         # declaration
    ...         Declaration(
    ...             licensee=licensee.party,
    ...             state='created',
    ...             creation_time=now,
    ...             template=False,
    ...             period=random.choice(declaration_periods),
    ...             tariff=tariff_playing,
    ...             context=location
    ...         ).save()
    ...
    ...         # device
    ...         device = Device(
    ...             web_user=licensee,
    ...             blocked=False,
    ...             name='Raspberry PI',
    ...             os_name='Raspbian',
    ...             os_version='10',
    ...             software_name='Tracker',
    ...             software_version='1.0.0',
    ...             software_vendor='C3S'
    ...         )
    ...         device.save()
    ...
    ...         # device assignment
    ...         DeviceAssignment(
    ...             device=device,
    ...             assignment=location.spaces[0],
    ...             start=now
    ...         ).save()
    ...
    ...         # device messages
    ...         timestamp = now - datetime.timedelta(days=1)
    ...         creation = random.choice(creations)
    ...         for i in range(0, fingerprint_messages_per_device):
    ...
    ...             # device message
    ...             message = DeviceMessage(
    ...                 device=device,
    ...                 timestamp=now,
    ...                 direction='incoming',
    ...                 category='fingerprint',
    ...                 context=location.spaces[0]
    ...             )
    ...             message.save()
    ...
    ...             # device message fingerprint
    ...             if not i % 4:
    ...                 creation = random.choice(creations)
    ...             timestamp = timestamp + datetime.timedelta(minutes=1)
    ...             DeviceMessageFingerprint(
    ...                 message=[message],
    ...                 state='matched',
    ...                 matched_creation=creation,
    ...                 timestamp=timestamp,
    ...                 data=''.join(random.sample(
    ...                     chars_fingerprint, len(chars_fingerprint))),
    ...                 algorithm='echoprint',
    ...                 version='1.0.0'
    ...             ).save()

Licensee Usecase: Life / Perfomances
------------------------------------
::
    >>> licensees = WebUser.find(['roles.code', '=', 'licensee'])
    >>> location_categories = LocationCategory.find(
    ...     [('code', 'in', ['B', 'N', 'O', 'M'])])
    >>> location_space_category_concert, = LocationSpaceCategory.find(
    ...     [('code', '=', 'C')])
    >>> tariff_live = Tariff.find(
    ...     [('category.name', '=', 'Live')])[-1]
    >>> artists = Artist.find([])

    >>> location_number = 1
    >>> event_number = 1

    >>> for licensee in licensees:
    ...
    ...     # location
    ...     location = Location(
    ...         name="Location Performance %s" % str(location_number).zfill(3),
    ...         category=random.choice(location_categories),
    ...         party=licensee.party,
    ...         public=True,
    ...         latitude=random.random()*180-90,
    ...         longitude=random.random()*360-180
    ...     )
    ...     location.save()
    ...     location_number += 1
    ...
    ...     # location spaces
    ...     LocationSpace(
    ...         location=location,
    ...         category=location_space_category_concert,
    ...         estimated_size=random.randint(10,100)
    ...     ).save()
    ...
    ...     # event
    ...     for i in range(0, licensee_live_events):
    ...
    ...         date = now - datetime.timedelta(days=random.randint(-30,30))
    ...         attendants = random.choice(
    ...             [10, 100, 500, 1000, 5000, 10000]
    ...         )
    ...         event = Event(
    ...             name='Event %s' % str(event_number).zfill(3),
    ...             description='The %s. event' % str(event_number).zfill(3),
    ...             location=location,
    ...             estimated_start=date,
    ...             estimated_end=date + datetime.timedelta(
    ...                 hours=performances_per_event
    ...             ),
    ...             estimated_attendants=attendants,
    ...             estimated_turnover_tickets=decimal.Decimal(
    ...                 attendants * random.randint(0, 20)
    ...             ),
    ...             estimated_turnover_benefit=decimal.Decimal(
    ...                 attendants * random.randint(1, 5)
    ...             ),
    ...             estimated_expenses_musicians=decimal.Decimal(
    ...                 performances_per_event * random.choice(
    ...                     [0, 50, 100, 1000]
    ...                 )
    ...             ),
    ...             estimated_expenses_production=decimal.Decimal(
    ...                 performances_per_event * random.randint(100, 1000)
    ...             )
    ...         )
    ...         event.save()
    ...         event_number += 1
    ...
    ...         # performances
    ...         for j in range(0, performances_per_event):
    ...             artist = random.choice(artists)
    ...
    ...             # performance
    ...             performance = EventPerformance(
    ...                 event=event,
    ...                 start=event.estimated_start + datetime.timedelta(
    ...                     hours=j
    ...                 ),
    ...                 end=event.estimated_start + datetime.timedelta(
    ...                     hours=j + 1
    ...                 ),
    ...                 artist=artist
    ...             )
    ...             performance.save()
    ...
    ...             # playlist
    ...             playlist = ArtistPlaylist(
    ...                 artist=artist,
    ...                 public=False,
    ...                 template=False,
    ...                 performance=[performance],
    ...                 entity_origin='indirect',
    ...                 entity_creator=licensee.party
    ...             )
    ...             playlist.save()
    ...
    ...             # playlist items
    ...             if artist.creations and random.random() > 0.1:
    ...                 creation = random.choice(artist.creations)
    ...             else:
    ...                 creation = random.choice(creations)
    ...             for k in range(1, items_per_performance_playlist + 1):
    ...                 ArtistPlaylistItem(
    ...                     playlist=playlist,
    ...                     creation=creation,
    ...                     position=k,
    ...                     entity_origin='indirect',
    ...                     entity_creator=licensee.party
    ...                 ).save()
    ...
    ...         # declaration
    ...         Declaration(
    ...             licensee=licensee.party,
    ...             state='created',
    ...             creation_time=date - datetime.timedelta(
    ...                 days=random.randint(10,30)
    ...             ),
    ...             template=False,
    ...             period='onetime',
    ...             tariff=tariff_live,
    ...             context=event
    ...         ).save()

Licensee Usecase: Reproduction / Release
----------------------------------------
::
    >>> licensees = WebUser.find(['roles.code', '=', 'licensee'])
    >>> tariff_reproduction = Tariff.find(
    ...     [('category.name', '=', 'Reproduction')])[-1]

    >>> release_number = 1

    >>> for licensee in licensees:
    ...
    ...     for i in range(0, licensee_reproduction_releases):
    ...
    ...         # release
    ...         artist = random.choice(artists)
    ...         production_date = now + datetime.timedelta(
    ...             days=random.randint(30, 90)
    ...         )
    ...         release_date = production_date + datetime.timedelta(
    ...             days=random.randint(30, 120)
    ...         )
    ...         artists = Artist.find([])
    ...         labels = Label.find([])
    ...         genres = Genre.find([])
    ...         styles = Style.find([])
    ...         release = Release(
    ...             type="artist",
    ...             artists=[artist],
    ...             entity_creator=licensee.party,
    ...             commit_state='uncommited',
    ...             claim_state='unclaimed',
    ...             title="Reproduction Release %s" % str(
    ...                 release_number).zfill(3),
    ...             genres=random.sample(genres, min(
    ...                 genres_per_release, len(genres))),
    ...             styles=random.sample(styles, min(
    ...                 styles_per_release, len(styles))),
    ...             warning='WARNING: This is testdata!',
    ...             copyright_date=datetime.date(
    ...                 random.randint(1800, 2019),
    ...                 random.randint(1, 12),
    ...                 random.randint(1, 28)
    ...             ),
    ...             production_date=production_date,
    ...             release_date=release_date,
    ...             online_release_date=release_date,
    ...             distribution_territory=random.choice(countries).code,
    ...             label=random.choice(labels),
    ...             label_catalog_number=str(random.randint(10000, 99999)),
    ...             publisher=random.choice(publishers),
    ...             confirmed_copies=random.choice([100, 1000, 10000, 100000])
    ...         )
    ...         release.save()
    ...         release_number += 1
    ...
    ...         # release tracks
    ...         creations = Creation.find([])
    ...         tracks = random.sample(
    ...             creations,
    ...             min(creations_per_reproduction_release, len(creations))
    ...         )
    ...         for i, track in enumerate(tracks):
    ...             rc = ReleaseTrack()
    ...             rc.creation=track
    ...             rc.release=release
    ...             rc.title=creation.title
    ...             rc.medium_number=1
    ...             rc.track_number=i + 1
    ...             rc.license=random.choice(License.find([]))
    ...             rc.save()
    ...
    ...         # declaration
    ...         Declaration(
    ...             licensee=licensee.party,
    ...             state='created',
    ...             creation_time=now - datetime.timedelta(
    ...                 days=random.randint(10,30)
    ...             ),
    ...             template=False,
    ...             period='onetime',
    ...             tariff=tariff_reproduction,
    ...             context=release
    ...         ).save()

Licensee Usecase: Online / Webradio
-----------------------------------
::
    >>> licensees = WebUser.find(['roles.code', '=', 'licensee'])
    >>> creations = Creation.find([])
    >>> tariff_online = Tariff.find(
    ...     [('category.name', '=', 'Online')])[-1]
    >>> website_category_webradio, = WebsiteCategory.find(
    ...     [('name', '=', 'Webradio')])
    >>> website_resource_category_channel, = WebsiteResourceCategory.find(
    ...     [('name', '=', 'Channel')])

    >>> webradio_number = 1
    >>> channel_number = 1

    >>> for licensee in licensees:
    ...
    ...     # website
    ...     website = Website(
    ...         name='Webradio %s' % str(webradio_number).zfill(3),
    ...         category=website_category_webradio,
    ...         party=licensee.party,
    ...         url='https://webradio%s.test' % str(webradio_number).zfill(3)
    ...     )
    ...     website.save()
    ...     webradio_number += 1
    ...
    ...     # website resources
    ...     for i in range(0, channels_per_webradio):
    ...
    ...         # website resource
    ...         website_resource = WebsiteResource(
    ...             website=website,
    ...             name='Channel %s' % str(channel_number).zfill(3),
    ...             category=website_resource_category_channel,
    ...             url='https://channel%s.webradio%s.test' % (
    ...                 str(channel_number).zfill(3),
    ...                 str(webradio_number).zfill(3)
    ...             )
    ...         )
    ...         website_resource.save()
    ...         channel_number += 1
    ...
    ...     # declaration
    ...     Declaration(
    ...         licensee=licensee.party,
    ...         state='created',
    ...         creation_time=now,
    ...         template=False,
    ...         period=random.choice(declaration_periods),
    ...         tariff=tariff_online,
    ...         context=website
    ...     ).save()
    ...
    ...     # device
    ...     device = Device(
    ...         web_user=licensee,
    ...         blocked=False,
    ...         name='Raspberry PI',
    ...         os_name='Raspbian',
    ...         os_version='10',
    ...         software_name='Tracker',
    ...         software_version='1.0.0',
    ...         software_vendor='C3S'
    ...     )
    ...     device.save()
    ...
    ...     # device assignment
    ...     DeviceAssignment(
    ...         device=device,
    ...         assignment=website,
    ...         start=now
    ...     ).save()
    ...
    ...     # device messages
    ...     for channel in website.resources:
    ...
    ...         timestamp = now - datetime.timedelta(days=1)
    ...         creation = random.choice(creations)
    ...
    ...         for i in range(0, fingerprint_messages_per_device):
    ...
    ...             # device message
    ...             message = DeviceMessage(
    ...                 device=device,
    ...                 timestamp=now,
    ...                 direction='incoming',
    ...                 category='fingerprint',
    ...                 context=channel
    ...             )
    ...             message.save()
    ...
    ...             # device message fingerprint
    ...             if not i % 4:
    ...                 creation = random.choice(creations)
    ...             timestamp = timestamp + datetime.timedelta(minutes=1)
    ...             DeviceMessageFingerprint(
    ...                 message=[message],
    ...                 state='matched',
    ...                 matched_creation=creation,
    ...                 timestamp=timestamp,
    ...                 data=''.join(random.sample(
    ...                     chars_fingerprint, len(chars_fingerprint))),
    ...                 algorithm='echoprint',
    ...                 version='1.0.0'
    ...             ).save()

Licensee Usecase: Online / Podcast
----------------------------------
::
    >>> licensees = WebUser.find(['roles.code', '=', 'licensee'])
    >>> tariff_online = Tariff.find(
    ...     [('category.name', '=', 'Online')])[-1]
    >>> website_category_podcast, = WebsiteCategory.find(
    ...     [('name', '=', 'Podcast')])
    >>> website_resource_category_episode, = WebsiteResourceCategory.find(
    ...     [('name', '=', 'Episode')])

    >>> podcast_number = 1
    >>> episode_number = 1

    >>> for licensee in licensees:
    ...
    ...     # website
    ...     website = Website(
    ...         name='Podcast %s' % str(podcast_number).zfill(3),
    ...         category=website_category_podcast,
    ...         party=licensee.party,
    ...         url='https://podcast%s.test' % str(podcast_number).zfill(3)
    ...     )
    ...     website.save()
    ...     podcast_number += 1
    ...
    ...     # website resources
    ...     for i in range(0, episodes_per_podcast):
    ...
    ...         # website resource
    ...         website_resource = WebsiteResource(
    ...             website=website,
    ...             name='Episode %s' % str(episode_number).zfill(3),
    ...             category=website_resource_category_episode,
    ...             url='https://podcast%s.test/episode%s' % (
    ...                 str(podcast_number).zfill(3),
    ...                 str(episode_number).zfill(3)
    ...             ),
    ...             originals=random.sample(
    ...                 Creation.find([]), originals_per_episode)
    ...         )
    ...         website_resource.save()
    ...         episode_number += 1
    ...
    ...     # declaration
    ...     Declaration(
    ...         licensee=licensee.party,
    ...         state='created',
    ...         creation_time=now,
    ...         template=False,
    ...         period=random.choice(declaration_periods),
    ...         tariff=tariff_online,
    ...         context=website
    ...     ).save()
    ...
    ...     # device
    ...     device = Device(
    ...         web_user=licensee,
    ...         blocked=False,
    ...         name='Podcast Reporter',
    ...         software_name='Reporter',
    ...         software_version='1.0.0',
    ...         software_vendor='C3S'
    ...     )
    ...     device.save()
    ...
    ...     # device assignment
    ...     DeviceAssignment(
    ...         device=device,
    ...         assignment=website,
    ...         start=now
    ...     ).save()
    ...
    ...     # device messages
    ...     for episode in website.resources:
    ...         timestamp = now - datetime.timedelta(
    ...             days=7*usagereport_messages_per_device)
    ...         for i in range(0, usagereport_messages_per_device):
    ...
    ...             # device message
    ...             message = DeviceMessage(
    ...                 device=device,
    ...                 timestamp=now,
    ...                 direction='incoming',
    ...                 category='usagereport',
    ...                 context=episode
    ...             )
    ...             message.save()
    ...
    ...             # device message usagereport
    ...             timestamp = timestamp + datetime.timedelta(days=7)
    ...             streams = random.randint(10, 1000000)
    ...             downloads = int(streams / 100)
    ...             DeviceMessageUsagereport(
    ...                 message=[message],
    ...                 state='created',
    ...                 timestamp=timestamp,
    ...                 reported_streams=streams,
    ...                 reported_downloads=downloads,
    ...                 reported_turnover_ads=decimal.Decimal(
    ...                     streams / random.randint(100,10000)
    ...                 ),
    ...                 reported_turnover_sale=decimal.Decimal(
    ...                     downloads / random.randint(1,100)
    ...                 )
    ...             ).save()

Licensee Usecase: Online / DSP
------------------------------
::
    >>> licensees = WebUser.find(['roles.code', '=', 'licensee'])
    >>> creations = Creation.find([])
    >>> tariff_online = Tariff.find(
    ...     [('category.name', '=', 'Online')])[-1]
    >>> website_category_dsp, = WebsiteCategory.find(
    ...     [('name', '=', 'DSP')])
    >>> website_resource_category_ugc, = WebsiteResourceCategory.find(
    ...     [('name', '=', 'User Generated Content')])

    >>> dsp_number = 1
    >>> ugc_number = 1

    >>> for licensee in licensees:
    ...
    ...     # website
    ...     website = Website(
    ...         name='DSP %s' % str(dsp_number).zfill(3),
    ...         category=website_category_dsp,
    ...         party=licensee.party,
    ...         url='https://dsp%s.test' % str(dsp_number).zfill(3)
    ...     )
    ...     website.save()
    ...     dsp_number += 1
    ...
    ...     # website resource
    ...     website_resource = WebsiteResource(
    ...         website=website,
    ...         name='UGC %s' % str(ugc_number).zfill(3),
    ...         category=website_resource_category_ugc
    ...     )
    ...     website_resource.save()
    ...     ugc_number += 1
    ...
    ...     # declaration
    ...     Declaration(
    ...         licensee=licensee.party,
    ...         state='created',
    ...         creation_time=now,
    ...         template=False,
    ...         period=random.choice(declaration_periods),
    ...         tariff=tariff_online,
    ...         context=website
    ...     ).save()
    ...
    ...     # device
    ...     device = Device(
    ...         web_user=licensee,
    ...         blocked=False,
    ...         name='UGC Reporter',
    ...         software_name='Reporter',
    ...         software_version='1.0.0',
    ...         software_vendor='C3S'
    ...     )
    ...     device.save()
    ...
    ...     # device assignment
    ...     DeviceAssignment(
    ...         device=device,
    ...         assignment=website,
    ...         start=now
    ...     ).save()
    ...
    ...     # device messages
    ...     timestamp = now - datetime.timedelta(
    ...         days=7*usagereport_messages_per_device)
    ...     for i in range(0, usagereport_messages_per_device):
    ...
    ...         # device message
    ...         message = DeviceMessage(
    ...             device=device,
    ...             timestamp=now,
    ...             direction='incoming',
    ...             category='usagereport',
    ...             context=website_resource
    ...         )
    ...         message.save()
    ...
    ...         # device message usagereport
    ...         timestamp = timestamp + datetime.timedelta(days=7)
    ...         streams = random.randint(10, 1000000)
    ...         downloads = int(streams / 100)
    ...         DeviceMessageUsagereport(
    ...             message=[message],
    ...             state='created',
    ...             timestamp=timestamp,
    ...             creation=random.choice(creations),
    ...             reported_streams=streams,
    ...             reported_downloads=downloads,
    ...             reported_turnover_ads=decimal.Decimal(
    ...                 streams / random.randint(100,10000)
    ...             ),
    ...             reported_turnover_sale=decimal.Decimal(
    ...                 downloads / random.randint(1,100)
    ...             )
    ...         ).save()
