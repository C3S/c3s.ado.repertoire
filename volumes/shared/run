#!/usr/bin/env python
# For copyright and license terms, see COPYRIGHT.rst (top level of repository)
# Repository: https://github.com/C3S/collecting_society_docker

"""
Command line tool to setup and maintain services in docker containers.

The commands may be executed by `docker-compose` or within a container.

Examples:

    Execution by `docker-compose`:
    >>> docker-compose run --rm SERVICE run --help

    Execution within a container:
    >>> docker-compose run --rm SERVICE bash
    >>> run --help
"""

from __future__ import print_function
import os
import sys
import shutil
import time
import subprocess
import glob
import fcntl
import click

import data

PROJECT = str(os.environ.get('PROJECT'))
ENVIRONMENT = str(os.environ.get('ENVIRONMENT'))
SERVICE = str(os.environ.get('SERVICE'))
SHARED_PATH = str(os.environ.get('WORKDIR'))
POSTGRES_HOSTNAME = str(os.environ.get('POSTGRES_HOSTNAME'))
POSTGRES_PORT = str(os.environ.get('POSTGRES_PORT'))

TMP_FILE = 'running_db_creation.delete_me'


@click.group()
def run():
    """
    Command line tool to setup and maintain services in docker containers.
    """


def _db_disconnect(dbname):
    """
    Cut off all database connections to allow delete
    """
    try:
        _db_execute_sql(
            "SELECT pg_terminate_backend(pg_stat_activity.pid) "
            "FROM pg_stat_activity "
            "WHERE pg_stat_activity.datname = '" + dbname + "' "
            "AND pid <> pg_backend_pid();")
    except subprocess.CalledProcessError as e:
        print(e)


def _db_update(modules, dbname, trytondconf=False):
    """
    Updates tryton modules for database DBNAME.

    Args:
        modules (str): Comma separated list of modules to update.
        dbname (str): Name of database.
        trytondconf (Optional[str]): Name of tryton config file.
    """
    print('Update services ...')
    if modules:
        modules = modules.split(',')
    _trytond_conf = trytondconf or ENVIRONMENT + '.conf'
    os.environ['TRYTONPASSFILE'] = 'config/trytond/passfile'
    os.environ['TRYTOND_CONFIG'] = os.path.join(
        SHARED_PATH, 'config', 'trytond', _trytond_conf
    )
    command = [
        'trytond',
        '-d', dbname,
        '-c', os.environ['TRYTOND_CONFIG']
    ]
    if modules:
        command.append('-u')
        command.extend(modules)
    else:
        command.append('--all')
    subprocess.call(command)


def _db_exist(dbname):
    """
    Checks if database exists.

    Args:
        dbname (str): Name of database.
    """
    return subprocess.check_output(
        [
            "psql",
            '-h', POSTGRES_HOSTNAME,
            '-p', POSTGRES_PORT,
            '-U', 'postgres',
            "-tAc",
            "SELECT 1 FROM pg_database WHERE datname='" + dbname + "'"
        ]
    )


def _db_execute_sql(sql):
    """
    Applies sql statements to the database.

    Args:
        sql (str): sql statement
    """
    return subprocess.check_output(
        [
            "psql",
            '-h', POSTGRES_HOSTNAME,
            '-p', POSTGRES_PORT,
            '-U', 'postgres',
            "-tAc",
            sql
        ]
    )


@run.command('pip-install')
@click.argument('service', default=SERVICE)
@click.pass_context
def pip_install(context, service):
    """
    Installs required packages for a CONTAINER with pip.

    Requirements have to be defined in
    `./shared/config/pip/CONTAINER.pip`.

    After installation a flag file is created within the container to avoid
    multiple execution during its lifespan.
    """
    flagfile = "/tmp/pip_install_" + service

    # check flagfile
    if not os.path.exists(flagfile):

        # install packages
        print('Install packages for ' + service + ' ... ', end='')
        subprocess.check_call(
            [sys.executable, '-m', 'pip', 'install', '-qr',
                os.path.join(
                    SHARED_PATH, 'config', 'pip', '%s.pip' % service)])
        print('ok')

        # create flagfile
        open(flagfile, 'w').close()
        if service in ['webgui', 'webapi']:
            open('/tmp/pip_install_erpserver', 'w').close()

        # restart process with new modules installed
        subprocess.check_call(sys.argv)
        sys.exit()

    else:

        print('Packages already installed.')

    import site
    reload(site)  # noqa: F821


@run.command('db-create')
@click.argument('dbname', default=PROJECT)
@click.pass_context
def db_create(context, dbname):
    """
    Creates the postrges database DBNAME.

    The execution is skipped if the database already exists.
    """
    print('Create database "%s" ... ' % dbname, end='')

    # check database
    if _db_exist(dbname):
        print('Create, but database "%s" exists: Skip!' % dbname)
        return

    # create database
    subprocess.call(
        [
            'createdb',
            '-h', POSTGRES_HOSTNAME,
            '-p', POSTGRES_PORT,
            '-U', 'postgres',
            '-O', 'postgres',
            '-E UTF-8',
            dbname
        ]
    )

    print('ok')


@run.command('db-delete')
@click.argument('dbname', default=PROJECT)
@click.pass_context
def db_delete(context, dbname):
    """
    Deletes the postrges database DBNAME.

    On error the deletion is retried several times.
    """
    print('Delete database "%s" ...' % dbname, end='')
    if not _db_exist(dbname):
        print(' database does not exist')
        return
    max_tries = 2
    tries = 0

    # kill connections (bug? see collecting_society_worker:repro.py:connect_db)
    _db_disconnect(dbname)

    # retry to delete the database
    while tries < max_tries:
        if tries > 0:
            print('...', end='')
        try:
            subprocess.check_output(
                [
                    'dropdb',
                    '-h', POSTGRES_HOSTNAME,
                    '-p', POSTGRES_PORT,
                    '-U', 'postgres',
                    dbname
                ], stderr=subprocess.STDOUT
            )
        except subprocess.CalledProcessError as e:
            tries += 1
            if tries == max_tries:
                print("error: \n\033[91m{}\033[0m".format(e.output.rstrip()))
                return
            continue
        print(" ok")
        return


@run.command('db-copy')
@click.argument('dbname-src')
@click.argument('dbname-dst')
@click.option('--force/--no-force', default=False,
              help='Force execution (default: no)')
@click.pass_context
def db_copy(context, dbname_src, dbname_dst, force):
    """
    Creates the postrges database DBNAME_DST from template DBNAME_SRC.
    """
    print('Copy database "%s" to "%s" ... ' % (dbname_src, dbname_dst), end='')

    # kill connections (bug? see collecting_society_worker:repro.py:connect_db)
    _db_disconnect(dbname_src)

    # --force option
    if force:
        context.invoke(db_delete, dbname=dbname_dst)

    # copy database
    subprocess.call(
        [
            'createdb',
            '-h', POSTGRES_HOSTNAME,
            '-p', POSTGRES_PORT,
            '-U', 'postgres',
            '-O', 'postgres',
            '-T', dbname_src,
            '-E UTF-8',
            dbname_dst
        ]
    )

    print('ok')


@run.command('db-connect')
@click.argument('dbname', default=PROJECT)
@click.pass_context
def db_connect(context, dbname):
    """
    Opens a SQL console for the database DBNAME.
    """
    print('Use ctrl-d or \\q to quit ...')

    # open console
    subprocess.call(
        [
            'psql',
            '-h', POSTGRES_HOSTNAME,
            '-p', POSTGRES_PORT,
            '-U', 'postgres',
            dbname
        ]
    )


@run.command('db-backup')
@click.argument('dbname', default=PROJECT)
@click.pass_context
def db_backup(context, dbname):
    """
    Dumps the postgres database DBNAME to stdout.
    """

    # backup database
    subprocess.call(
        [
            'pg_dump',
            '-h', POSTGRES_HOSTNAME,
            '-p', POSTGRES_PORT,
            '-U', 'postgres',
            dbname
        ]
    )


@run.command('db-update')
@click.option(
    '--modules', '-m', default='collecting_society',
    help='Single module or comma separated list of modules to update. '
    'Whitspace not allowed!')
@click.argument('dbname', default=PROJECT)
@click.pass_context
def db_update(context, modules, dbname):
    """
    Updates tryton modules for database DBNAME.

    Modules can be provided, default is 'collecting_society'.
    If modules are 'all', all modules are updated.
    """
    context.invoke(pip_install, container='erpserver')
    if modules == 'all':
        modules = ''
    _db_update(modules, dbname)


@run.command('db-setup')
@click.argument('dbname', default=PROJECT)
@click.option('--reclimit', '-r', type=int, default=-1,
              help='Maximum numbers of objects (default: 0 = all)')
@click.option('--dataset', '-d', type=str, default=[], multiple=True,
              help='dataset in ./data/datasets/ to generate (default: all)\n'
                   'can be used multiple times')
@click.option('--exclude', '-e', type=str, default=[], multiple=True,
              help='datasets in ./data/datasets/ to exclude (default: none)\n'
                   'can be used multiple times')
@click.option('--template/--no-template', default=True,
              help='Use template db for dataset deps (default: yes)')
@click.option('--cache/--no-cache', default=False,
              help='Regenerate template db for dataset deps (default: no)')
@click.option('--force/--no-force', default=False,
              help='Force execution (default: no)')
@click.option('--pdb/--no-pdb', default=False,
              help='Start pdb on error (default: no)')
@click.pass_context
def db_setup(context, dbname, reclimit, dataset, exclude,
             template, cache, force, pdb):
    """
    Creates and sets up the postgres database DBNAME.

    The execution is skipped if the database already exists.
    The execution might be forced (omits the db creation, if it exists).

    Executes scenario master data to set up the database, if master.
    Executes scenario demo data in development environment, if demo.

    During installation a lockfile is created on the host to prevent multiple
    execution from different docker containers.
    """
    context.invoke(pip_install, container='erpserver')

    # Check lockfile, if locked, wait till not locked any more
    while True:
        try:
            lockfile = open(TMP_FILE, 'w+')
            fcntl.flock(lockfile, fcntl.LOCK_EX | fcntl.LOCK_NB)
            print("Database creation commencing.")
            break
        except IOError:
            time.sleep(3)
            print("Waiting for the other process to finish db creation...")
        except KeyboardInterrupt:
            fcntl.flock(lockfile, fcntl.LOCK_UN)
            lockfile.close()
            try:
                os.remove(TMP_FILE)
            except OSError:
                pass
            sys.exit()

    # Check database
    if not _db_exist(dbname) or force:

        # Cofigure trytond
        os.environ['DB_NAME'] = dbname
        os.environ['TRYTOND_CONFIG'] = os.path.join(
            SHARED_PATH, 'config', 'trytond', ENVIRONMENT + '.conf'
        )

        # With template
        if template:
            print("Setup database with template database.")
            template_dbname = dbname + "_template"
            # Delete template database
            if not cache and not exclude:
                context.invoke(db_delete, dbname=template_dbname)
            # Create template
            if not _db_exist(template_dbname):
                os.environ['DB_NAME'] = template_dbname
                # Create template database
                context.invoke(db_create, dbname=template_dbname)
                # Update template database
                _db_update(None, template_dbname)
                # Generate dependent datasets
                data.generate(
                    dataset, exclude, reclimit=reclimit,
                    dependencies=True, leaves=False, pdb=pdb)
            # Copy template
            context.invoke(
                db_copy, dbname_src=template_dbname, dbname_dst=dbname)
            # Generate leave datasets
            os.environ['DB_NAME'] = dbname
            if exclude:
                data.generate(
                    dataset, exclude, reclimit=reclimit,
                    dependencies=True, leaves=True, pdb=pdb)
            elif dataset:
                data.generate(
                    dataset, exclude, reclimit=reclimit,
                    dependencies=False, leaves=True, pdb=pdb)

        # Without template
        else:
            print("Setup database without template database.")
            # Create database
            if not _db_exist(dbname):
                context.invoke(db_create, dbname=dbname)
                _db_update(None, dbname)
            # Generate datasets
            data.generate(
                dataset, exclude, reclimit=reclimit,
                dependencies=True, leaves=True, pdb=pdb)

    else:
        print('Setup database, but database "%s" exists: Skip!' % dbname)

    if lockfile:
        # unlock file
        fcntl.flock(lockfile, fcntl.LOCK_UN)
        lockfile.close()
        try:
            os.remove(TMP_FILE)
        except OSError:
            print("Couldn't remove lock file, something has gone wrong")


@run.command('db-rebuild')
@click.argument('dbname', default=PROJECT)
@click.option('--reclimit', '-r', type=int, default=-1,
              help='Maximum numbers of objects (default: 0 = all)')
@click.option('--dataset', '-d', type=str, default=[], multiple=True,
              help='dataset in ./data/datasets/ to generate (default: all)\n'
                   'can be used multiple times')
@click.option('--exclude', '-e', type=str, default=[], multiple=True,
              help='datasets in ./data/datasets/ to exclude (default: none)\n'
                   'can be used multiple times')
@click.option('--template/--no-template', default=True,
              help='Use template db for dataset deps (default: yes)')
@click.option('--cache/--no-cache', default=False,
              help='Use/Recreate template db for dataset deps (default: no)')
@click.option('--pdb/--no-pdb', default=False,
              help='Start pdb on error (default: no)')
@click.pass_context
def db_rebuild(context, dbname, reclimit, dataset, exclude,
               template, cache, pdb):
    """
    Deletes DBNAME and executes db setup
    """
    context.invoke(pip_install, container='erpserver')
    print("-" * 100)
    print("  Rebuild database")
    print("-" * 100)
    # Delete database
    context.invoke(db_delete, dbname=dbname)
    # Setup database
    context.invoke(
        db_setup, dbname=dbname, reclimit=reclimit, dataset=dataset,
        exclude=exclude, template=template, cache=cache, force=False, pdb=pdb)


@run.command('service-test', context_settings=dict(
                 ignore_unknown_options=True))
@click.option('--dbname', default=PROJECT + '_test',
              help='Name of database (default: test)')
@click.option('--reset/--no-reset', default=True,
              help='Reset the database (default: yes)')
@click.option('--path', default=False,
              help='Searchpath for tests (see nosetest)')
@click.argument('service', default=SERVICE)
@click.argument('nargs', nargs=-1, type=click.UNPROCESSED)
@click.pass_context
def service_test(context, service, dbname, reset, path, nargs):
    """
    Runs all tests for a service (erpserver, web, worker).

    Starts nosetests and prints output to stdout.

    Creates the test database template DBNAME_template, if not existant.
    On RESET, the database DBNAME will be recreated from this template and
    the temporary tryton file folder will be deleted.

    The location of the temporary tryton upload folder is configured in
    `./shared/config/trytond/testing_DBTYPE.conf`
    (currently `./shared/tmp/files`).

    The location of the screenshots of integration tests is configured within
    `<portal_web>/tests/config.py` (currenty `./shared/tmp/screenshots).

    The PATH to tests may be defined to test certain testfiles, testclasses or
    test methods (see nosetests for the syntax).
    If no PATH is given, all tests of portal_web and plugins are included.
    The test files should be stored below the following subpaths by convention:

        <portal_web||plugin>/tests/unit (unittest)

        <portal_web||plugin>/tests/functional (webtest)

        <portal_web||plugin>/tests/integration (selenium)

    Additional NARGS will be passed to nosetests.
    """
    if service not in ['erpserver', 'web', 'worker']:
        print("Service unknown.")
        exit(-1)

    if service == 'erpserver':
        context.invoke(pip_install, container='erpserver')
        os.environ['DB_NAME'] = ":memory:"
        # Start tests
        exitcode = subprocess.call(
            [
                'python',
                '/shared/src/trytond/trytond/tests/run-tests.py',
                '-vvvm',
                'collecting_society',
            ]
        )
        # Return exitcode
        sys.exit(exitcode)

    _db_name = dbname
    _db_tpl = _db_name + "_template"
    _file_path = os.path.join(SHARED_PATH, 'tmp', 'files')
    _trytond_conf = 'testing.conf'
    os.environ['DB_NAME'] = _db_name
    os.environ['TRYTOND_CONFIG'] = os.path.join(
        SHARED_PATH, 'config', 'trytond', _trytond_conf
    )

    # Install packages
    if service == "web":
        context.invoke(pip_install, container='webgui')
    if service == "worker":
        context.invoke(pip_install, container='worker')

    # Setup containers
    print("\nCONFIGURE TESTS ...\n")
    print("- service: %s" % service)
    print("- testpath: %s" % (path or 'all'))
    print("- parameter: %s" % list(nargs))
    print("- dbname: %s" % _db_name)
    print("- reset: %s" % bool(reset))
    print("- trytondconf: %s" % os.environ['TRYTOND_CONFIG'])
    print("- filepath: %s" % _file_path)
    print("\nPREPARE TESTS ...\n")
    if reset:

        # Delete files
        if os.path.exists(_file_path):
            shutil.rmtree(_file_path)
        os.makedirs(_file_path)

        # Recreate database
        if not _db_exist(_db_tpl):
            context.invoke(
                db_setup, dbname=_db_tpl, dataset=['master'], template=False
            )
        context.invoke(
            db_copy, dbname_src=_db_tpl, dbname_dst=_db_name, force=True
        )

    # Prepare paths
    if service == "web":
        basepaths = glob.glob(
            os.path.join(SHARED_PATH, 'src', '*_web')
        )
    elif service == "worker":
        basepaths = [
            os.path.join(SHARED_PATH, 'src', 'collecting_society_worker')
        ]
    modules = []
    testpaths = []
    for basepath in basepaths:
        module = os.path.basename(os.path.normpath(basepath)).replace('.', '_')
        modules.append(module)
        testpaths.append(os.path.join(basepath, module, 'tests'))
    if path:
        paths = [os.path.join(SHARED_PATH, path)]
    else:
        paths = [os.path.join(path, 'unit') for path in testpaths] +\
                [os.path.join(path, 'functional') for path in testpaths] +\
                [os.path.join(path, 'integration') for path in testpaths]

    # Start tests
    print("\nSTART TESTS ...\n")
    exitcode = subprocess.call(
        [
            'nosetests',
            '--verbose',
            '--logging-level=CRITICAL',
            '--all-modules',
            '--with-coverage',
            '--cover-html',
            '--cover-html-dir=cover_' + service,
            '--cover-xml',
            '--cover-xml-file=cover_' + service + '.xml',
            '--with-xunit',
            '--xunit-file=nosetests_' + service + '.xml',
            '--cover-erase',
            '--cover-inclusive',
            '--cover-package='+','.join(modules),
        ] + list(nargs) + list(paths)
    )

    # Return exitcode
    sys.exit(exitcode)


@run.command('service-deploy')
@click.argument('service', default=SERVICE)
@click.pass_context
def service_deploy(context, service):
    """
    Deploys the services (erpserver, webgui, webapi).

    Installs pip packages, creates and sets up database and runs the
    application (trytond, pyramid).
    """
    context.invoke(pip_install, container=SERVICE)

    # demodata generation
    if ENVIRONMENT in ["development", "staging"]:
        context.invoke(db_setup)

    # erpserver
    if service == "erpserver":
        _trytond_conf = ENVIRONMENT + '.conf'
        subprocess.call(
            [
                'trytond',
                '--dev',
                '-c', os.path.join(
                    SHARED_PATH, 'config', 'trytond', _trytond_conf)
            ]
        )

    # webgui/webapi
    if service in ["webgui", "webapi"]:
        trusted_proxy = 'trusted_proxy=' + str(os.environ.get('TRUSTED_PROXY'))
        subprocess.call(
            [
                'pserve',
                os.path.join(
                    SHARED_PATH, 'src', 'portal_web', ENVIRONMENT + '.ini'
                ),
                trusted_proxy,
                '--reload'
            ]
        )

    # worker
    # if service == "worker":
    #     subprocess.call(
    #         []
    #     )


@run.command('docs-build')
@click.option('--autoapi/--no-autoapi', default=True,
              help='Activate autoapi (default: yes)')
@click.pass_context
def docs_build(context, autoapi):
    """
    Builds the Sphinx documentation.

    Installs pip packages of all modules so they can be found by Sphinx.
    autoapi and Sphinx are started with docs/build.sh.
    """
    context.invoke(pip_install, container='documentation')
    wd = os.getcwd()
    os.chdir(os.path.join(SHARED_PATH, 'docs'))
    subprocess.Popen("ls")
    if autoapi:
        subprocess.call(['./build.sh'])
    else:
        subprocess.call(['make', 'html'])
    os.chdir(wd)


if __name__ == '__main__':
    run()
