# For copyright and license terms, see COPYRIGHT.rst (top level of repository)
# Repository: https://github.com/C3S/collecting_society_docker

version: '2.4'

networks:
  frontend:
  backend:

services:

  database:
    build:
      context: ./services/build
      target: database
      args: &buildargs
        ENVIRONMENT: ${ENVIRONMENT}
        APT_CACHERURL: ${APT_CACHERURL}
        WORKDIR: ${WORKDIR}
        DEBIAN: ${DEBIAN}
        DEBUGGER_WINPDB: ${DEBUGGER_WINPDB}
        DEBUGGER_PTVSD: ${DEBUGGER_PTVSD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  erpserver:
    build:
      context: ./services/build
      target: erpserver
      args: *buildargs
    command: execute deploy-erpserver
    networks:
      - backend
    ports:
      - "8000:8000"  # jsonrpc (tryton client)
    healthcheck:
      test: ["CMD-SHELL", "if curl -v -k -X POST -H 'Content-Type: text/html' -d '<xml></xml>' --silent https://localhost:8069 2>&1 | grep 'Connection refused'; then exit 1; fi"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./volumes/shared:/shared
    depends_on:
      database:
        condition: service_healthy
      fingerprint:
        condition: service_started
    env_file:
      - .env

  webserver:
    build:
      context: ./services/build
      target: webserver
      args: *buildargs
    networks:
      - frontend
    ports:
      - "80:80"  # http
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    logging:
      driver: none

  webapi:
    build:
      context: ./services/build
      target: webapi
      args: *buildargs
    command: execute deploy-webapi
    networks:
      - frontend
      - backend
    volumes:
      - ./volumes/shared:/shared
    depends_on:
      database:
        condition: service_healthy
      webserver:
        condition: service_started
    env_file:
      - .env
      - services/webapi.env

  webgui:
    build:
      context: ./services/build
      target: webgui
      args: *buildargs
    command: execute deploy-webgui
    networks:
      - frontend
      - backend
    volumes:
      - ./volumes/shared:/shared
    depends_on:
      webapi:
        condition: service_started
    env_file:
      - .env
      - services/webgui.env

  worker:
    build:
      context: ./services/build
      target: worker
      args: *buildargs
    cpu_percent: 50
    mem_limit: 500m
    #command: cron && tail -f /shared/tmp/repro.log &
    command: bash -c "while true; do cd /shared/src/collecting_society_worker/collecting_society_worker && python repro.py all; sleep 60; done"
    networks:
      - backend
    volumes:
      - ./volumes/shared:/shared
    depends_on:
      erpserver:
        condition: service_healthy
      fingerprint:
        condition: service_started
    env_file:
      - .env
      - services/worker.env

  fingerprint:
    build:
      context: ./services/build
      target: fingerprint
      args: *buildargs
    command: /bin/fingerprint
    networks:
      - backend
    volumes:
      - ./volumes/shared:/shared
    env_file:
      - .env
