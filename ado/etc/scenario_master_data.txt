# -*- coding: utf-8 -*-
# For copyright and license terms, see COPYRIGHT.rst (top level of repository)
# Repository: https://github.com/C3S/c3s.ado.repertoire

===========
Master Data
===========
Imports
-------
::

    >>> import os
    >>> import uuid
    >>> import datetime
    >>> from dateutil.relativedelta import relativedelta
    >>> from decimal import Decimal
    >>> from proteus import config, Model, Wizard
    >>> today = datetime.date.today()
    >>> now = datetime.datetime.now()

Create a Tryton database
------------------------
::

    >>> config = config.set_trytond(
    ...     config_file=os.environ.get('TRYTOND_CONFIG'))

Install meta ado module into database
-------------------------------------
::

    >>> Module = Model.get('ir.module.module')
    >>> c3s_module, = Module.find(
    ...     [('name', '=', 'collecting_society')])
    >>> c3s_module.click('install')
    >>> Wizard('ir.module.module.install_upgrade').execute('upgrade')

Common Defaults
---------------
Country Germany::

    >>> Country = Model.get('country.country')
    >>> germany, = Country.find([('code', '=', 'DE')])

Currency Euro::

    >>> Currency = Model.get('currency.currency')
    >>> euro, = Currency.find([('code', '=', 'EUR')])

Set general precision for currencies::

    >>> euro.rounding = Decimal('0.000001')
    >>> euro.save()

Company
-------
::

    >>> Company = Model.get('company.company')
    >>> Party = Model.get('party.party')

    >>> party = Party(
    ...     name='Cultural Commons Collecting Society SCE '
    ...         'mit beschränkter Haftung')

    >>> _ = party.addresses.pop()
    >>> party_address = party.addresses.new(
    ...     street='Heyestraße 194',
    ...     zip='40625',
    ...     city='Düsseldorf',
    ...     country=germany)
    >>> party.save()

    >>> company_config = Wizard('company.company.config')
    >>> company_config.execute('company')
    >>> company = company_config.form
    >>> company.party = party
    >>> company.currency = euro
    >>> company_config.execute('add')
    >>> company, = Company.find()

Reload the context::

    >>> User = Model.get('res.user')
    >>> config._context = User.get_preferences(True, config.context)

Create payment term::

    >>> PaymentTerm = Model.get('account.invoice.payment_term')
    >>> PaymentTermLine = Model.get('account.invoice.payment_term.line')
    >>> payment_term = PaymentTerm(name='Term')
    >>> payment_term_line = PaymentTermLine(type='remainder', days=14)
    >>> payment_term.lines.append(payment_term_line)
    >>> payment_term.save()

Create fiscal year::

    >>> FiscalYear = Model.get('account.fiscalyear')
    >>> Sequence = Model.get('ir.sequence')
    >>> SequenceStrict = Model.get('ir.sequence.strict')
    >>> fiscalyear = FiscalYear(name='%s' % today.year)
    >>> fiscalyear.start_date = today + relativedelta(month=1, day=1)
    >>> fiscalyear.end_date = today + relativedelta(month=12, day=31)
    >>> fiscalyear.company = company
    >>> post_move_sequence = Sequence(name='%s' % today.year,
    ...     code='account.move', company=company)
    >>> post_move_sequence.save()
    >>> fiscalyear.post_move_sequence = post_move_sequence
    >>> invoice_seq = SequenceStrict(name=str(today.year),
    ...     code='account.invoice', company=company)
    >>> invoice_seq.save()
    >>> fiscalyear.out_invoice_sequence = invoice_seq
    >>> fiscalyear.in_invoice_sequence = invoice_seq
    >>> fiscalyear.out_credit_note_sequence = invoice_seq
    >>> fiscalyear.in_credit_note_sequence = invoice_seq
    >>> fiscalyear.save()
    >>> FiscalYear.create_period([fiscalyear.id], config.context)

Create chart of accounts::

    >>> AccountTemplate = Model.get('account.account.template')
    >>> Account = Model.get('account.account')
    >>> account_template, = AccountTemplate.find([('parent', '=', None)])
    >>> create_chart = Wizard('account.create_chart')
    >>> create_chart.execute('account')
    >>> create_chart.form.account_template = account_template
    >>> create_chart.form.company = company
    >>> create_chart.execute('create_account')
    >>> receivable, = Account.find([
    ...         ('kind', '=', 'receivable'),
    ...         ('company', '=', company.id),
    ...         ])
    >>> payable, = Account.find([
    ...         ('kind', '=', 'payable'),
    ...         ('company', '=', company.id),
    ...         ])
    >>> revenue, = Account.find([
    ...         ('kind', '=', 'revenue'),
    ...         ('company', '=', company.id),
    ...         ])
    >>> expense, = Account.find([
    ...         ('kind', '=', 'expense'),
    ...         ('company', '=', company.id),
    ...         ])
    >>> cash, = Account.find([
    ...         ('kind', '=', 'other'),
    ...         ('company', '=', company.id),
    ...         ('name', '=', 'Main Cash'),
    ...         ])
    >>> account_tax, = Account.find([
    ...         ('kind', '=', 'other'),
    ...         ('company', '=', company.id),
    ...         ('name', '=', 'Main Tax'),
    ...         ])

    >>> create_chart.form.account_receivable = receivable
    >>> create_chart.form.account_payable = payable
    >>> create_chart.execute('create_properties')

Create Transitory account view::

    >>> root_account, = Account.find([('name', '=', 'Minimal Account Chart')])
    >>> transitory_account_view = Account(
    ...     name='Transitory Accounts',
    ...     kind='view',
    ...     parent=root_account,
    ...     company=company)
    >>> transitory_account_view.save()


Create account for imp artist hat::

    >>> AccountType = Model.get('account.account.type')
    >>> hat_account_type = AccountType(
    ...     name='Hat',
    ...     company=company)
    >>> hat_account_type.save()
    >>> hat_account = Account(
    ...     name='Hat',
    ...     type=hat_account_type,
    ...     kind='hat',
    ...     parent=transitory_account_view,
    ...     company=company)
    >>> hat_account.save()

.. todo:: This needs re-work: Balance, Income Staement, VAT

Set hat account as default hat account::

    >>> CSConfig = Model.get('collecting_society.configuration')
    >>> csconfig, = CSConfig.find()
    >>> csconfig.default_hat_account = hat_account
    >>> csconfig.save()

Create account for imp web user pocket::

    >>> pocket_account_type = AccountType(
    ...     name='Pocket',
    ...     company=company)
    >>> pocket_account_type.save()
    >>> pocket_account = Account(
    ...     name='Pocket',
    ...     type=pocket_account_type,
    ...     kind='pocket',
    ...     parent=transitory_account_view,
    ...     company=company)
    >>> pocket_account.save()

Set pocket account as default pocket account::

    >>> CSConfig = Model.get('collecting_society.configuration')
    >>> csconfig, = CSConfig.find()
    >>> csconfig.default_pocket_account = pocket_account
    >>> csconfig.save()

Create tax::

    >>> TaxCode = Model.get('account.tax.code')
    >>> Tax = Model.get('account.tax')
    >>> tax = Tax()
    >>> tax.name = '19% Mehrwertsteuer'
    >>> tax.description = '19% Mehrwertsteuer'
    >>> tax.type = 'percentage'
    >>> tax.rate = Decimal('.19')
    >>> tax.invoice_account = account_tax
    >>> tax.credit_note_account = account_tax
    >>> invoice_base_code = TaxCode(name='invoice base')
    >>> invoice_base_code.save()
    >>> tax.invoice_base_code = invoice_base_code
    >>> invoice_tax_code = TaxCode(name='invoice tax')
    >>> invoice_tax_code.save()
    >>> tax.invoice_tax_code = invoice_tax_code
    >>> credit_note_base_code = TaxCode(name='credit note base')
    >>> credit_note_base_code.save()
    >>> tax.credit_note_base_code = credit_note_base_code
    >>> credit_note_tax_code = TaxCode(name='credit note tax')
    >>> credit_note_tax_code.save()
    >>> tax.credit_note_tax_code = credit_note_tax_code
    >>> tax.save()

Create transitory journal::

    >>> AccountJournal = Model.get('account.journal')
    >>> sequence_journal, = Sequence.find([('code', '=', 'account.journal')])
    >>> journal = AccountJournal(
    ...     name='Transitory', code='TRANS', type='general',
    ...     sequence=sequence_journal)
    >>> journal.save()

Create Licenses:

    >>> License = Model.get('license')

    >>> license_cc_by_nc_nd = License(
    ...     code='CC BY-NC-DN',
    ...     name='Creative Commons - Attribution NonCommercial NoDerivatives',
    ...     freedom_rank=1000,
    ...     version='1.0',
    ...     country='de',
    ...     link='http://url.test/license'
    ... )
    >>> license_cc_by_nc_nd.save()

    >>> license_cc_by_nc_nd = License(
    ...     code='CC BY-NC-SA',
    ...     name='Creative Commons - Attribution NonCommercial ShareAlike',
    ...     freedom_rank=1100,
    ...     version='1.0',
    ...     country='de',
    ...     link='http://url.test/license'
    ... )
    >>> license_cc_by_nc_nd.save()

    >>> license_cc_by_nc = License(
    ...     code='CC BY-NC',
    ...     name='Creative Commons - Attribution NonCommercial',
    ...     freedom_rank=1200,
    ...     version='1.0',
    ...     country='de',
    ...     link='http://url.test/license'
    ... )
    >>> license_cc_by_nc.save()

    >>> license_cc_by_nd = License(
    ...     code='CC BY-ND',
    ...     name='Creative Commons - Attribution NoDerivatives',
    ...     freedom_rank=1300,
    ...     version='1.0',
    ...     country='de',
    ...     link='http://url.test/license'
    ... )
    >>> license_cc_by_nd.save()

    >>> license_cc_by_sa = License(
    ...     code='CC BY-SA',
    ...     name='Creative Commons - Attribution ShareAlike',
    ...     freedom_rank=1400,
    ...     version='1.0',
    ...     country='de',
    ...     link='http://url.test/license'
    ... )
    >>> license_cc_by_sa.save()

    >>> license_cc_by = License(
    ...     code='CC BY',
    ...     name='Creative Commons - Attribution',
    ...     freedom_rank=1600,
    ...     version='1.0',
    ...     country='de',
    ...     link='http://url.test/license'
    ... )
    >>> license_cc_by.save()


Create employees:

Create company internal users:

Final
=====
Set configuration wizard items done::

    >>> Item = Model.get('ir.module.module.config_wizard.item')
    >>> items = Item.find()
    >>> for item in items:
    ...     item.state = 'done'
    ...     item.save()

Set German language translatable::

    >>> Language = Model.get('ir.lang')
    >>> german_language, = Language.find([('code', '=', 'de_DE')])
    >>> german_language.translatable = True
    >>> german_language.save()
