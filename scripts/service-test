#!/bin/bash
# For copyright and license terms, see COPYRIGHT.rst (top level of repository)
# Repository: https://github.com/C3S/collecting_society_docker
#
# Usage: ./scripts/service-test [service] [--down] [--build] [--keep] [--ci] [PARARAMS]
#
# Options:
#     service: web|worker|erpserver|all (default: all)
#     --down: immediately stop and remove the container and exit
#     --build: build images and recreate the test database template
#     --keep: keep container running
#     --ci: continous integration mode
#           - update repositories (overrides config files!)
#           - build images
#           - recreate the test database template
#           - run tests and linter
#           - stop and remove the container
#     PARAMS: are passed to run-tests within the container

echo "====================================================================="
echo "====================================================================="
echo "= this script stops, updates, builds and tests the docker setup     ="
echo "====================================================================="
echo `date +%Y-%m-%d:%H:%M:%S`

# get directories
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
ROOT_DIR="$( dirname $SCRIPT_DIR )"
cd $ROOT_DIR

# get options
SERVICES="erpserver web worker"
SERVICE="all"
BUILD=false
RM=true
CI=false
DOWN=false
TESTING="-f docker-compose.testing.yml"
TESTPARAMS=""
for i in "$@"; do
    if [ $i = $1 ] && [[ $i =~ ^(erpserver|web|worker)$ ]]; then SERVICE=$i; SERVICES=$SERVICE; continue; fi
    if [ $i = "--down" ]; then DOWN=true; continue; fi
    if [ $i = "--build" ]; then BUILD=true; continue; fi
    if [ $i = "--keep" ]; then RM=false; continue; fi
    if [ $i = "--ci" ]; then CI=true; continue; fi
    TESTPARAMS="$TESTPARAMS $i"
done

# immediately stop and remove the container and exit
if $DOWN; then
    echo -e "\n== immediately stop and remove the container and exit"
    docker-compose $TESTING down
    exit $?
fi

# update repositories
if $CI; then
    echo -e "\n== update repositories"
    $SCRIPT_DIR/update --reset
fi

# build docker images
if $CI || $BUILD; then
    echo -e "\n== build images"
    docker-compose $TESTING build
fi

# create and start docker container
echo -e "\n== create and start docker container"
docker-compose $TESTING up -d
if [ $? -ne 0 ]; then
    echo -e "\n... if the images are missing or need to be updated, use './scripts/test --build'"
fi

# recreate test database template
if $CI || $BUILD; then
    echo -e "\n== recreate test database template"
    docker-compose $TESTING exec -T test_erpserver db-rebuild --no-template -d master collecting_society_test_template
fi

# run tests and linter
ERRORS=""
for SERVICE in $SERVICES; do
    # run tests
    echo -e "\n== run tests for $SERVICE"
    docker-compose $TESTING exec -T test_$SERVICE service-test $SERVICE $TESTPARAMS
    [ $? -ne 0 ] && ERRORS="$ERRORS\n- $SERVICE tests"
    # run linter
    LINTPATHS=""
    [ $SERVICE = "erpserver" ] && LINTPATHS="collecting_society"
    [ $SERVICE = "web" ]       && LINTPATHS="portal_web collecting_society_web"
    [ $SERVICE = "worker" ]    && LINTPATHS="collecting_society_worker"
    for LINTPATH in $LINTPATHS; do
        echo -e "\n== run linter for $SERVICE: code/$LINTPATH"
        docker-compose $TESTING exec -T test_$SERVICE flake8 src/$LINTPATH
        [ $? -eq 0 ] && echo -e "All fine."
        [ $? -ne 0 ] && ERRORS="$ERRORS\n- $SERVICE flake8: code/$LINTPATH"
    done
done

# remove docker container
if $CI || $RM; then
    echo -e "\n== remove docker container"
    docker-compose $TESTING rm -fs
fi

EXITCODE=0
if [[ ! -z "$ERRORS" ]]; then
    EXITCODE=1
    echo -e "\033[91;5m"
    echo -e "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo -e " WARNING: ERRORS OCCURED WHILE TESTS WERE RUNNING. PLEASE FIX."
    echo -e "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    echo -e "\e[25m"
    echo -e "Errors:\n$ERRORS"
    echo -e "\033[0m"
fi
echo `date +%Y-%m-%d:%H:%M:%S`
echo "====================================================================="
echo "====================================================================="

exit $EXITCODE
